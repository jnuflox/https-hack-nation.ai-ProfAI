"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_jnufloga_Documents_Hacknation_profai_mvp_app_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/jnufloga/Documents/Hacknation/profai_mvp/app/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_jnufloga_Documents_Hacknation_profai_mvp_app_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmpudWZsb2dhJTJGRG9jdW1lbnRzJTJGSGFja25hdGlvbiUyRnByb2ZhaV9tdnAlMkZhcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGam51ZmxvZ2ElMkZEb2N1bWVudHMlMkZIYWNrbmF0aW9uJTJGcHJvZmFpX212cCUyRmFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDeUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvPzU2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2pudWZsb2dhL0RvY3VtZW50cy9IYWNrbmF0aW9uL3Byb2ZhaV9tdnAvYXBwL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hhdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NoYXQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvam51ZmxvZ2EvRG9jdW1lbnRzL0hhY2tuYXRpb24vcHJvZmFpX212cC9hcHAvYXBwL2FwaS9jaGF0L3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_gemini__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/gemini */ \"(rsc)/./lib/gemini.ts\");\n/* harmony import */ var _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/enhanced-gemini */ \"(rsc)/./lib/enhanced-gemini.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/mock-data */ \"(rsc)/./lib/mock-data.ts\");\n/**\n * Chat API Route for ProfAI\n * Handles conversational interactions with the AI tutor system using Gemini Pro 2.5\n * \n * DEVELOPMENT MODE:\n * - Authentication validation is disabled for easier testing\n * - Using mock user session to bypass auth requirements\n * - To enable authentication: uncomment getServerSession imports and validation\n */ \n// DESARROLLO: Comentado para facilitar pruebas\n// import { getServerSession } from 'next-auth';\n// import { authOptions } from '@/lib/auth';\n\n// Add Enhanced Gemini Service import\n\n\n\nconst dynamic = \"force-dynamic\";\nasync function POST(request) {\n    try {\n        // DESARROLLO: Usuario mock para pruebas (sin validación de autenticación)\n        const session = {\n            user: {\n                id: \"demo_user_dev\",\n                email: \"dev@profai.com\",\n                name: \"Usuario Desarrollo\"\n            }\n        };\n        const body = await request.json();\n        const { message, context, action = \"chat\", conversationId, emotionalState } = body;\n        if (!message || message.trim().length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Message is required\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDCAC Chat request for user:\", session.user.id, \"action:\", action);\n        // CAMBIO: Usar Enhanced Gemini para todos los usuarios, incluyendo demo users\n        // Eliminar el bypass de usuario demo para usar siempre la IA real\n        // Si es usuario demo, usar Enhanced Gemini directamente sin base de datos\n        if ((0,_lib_mock_data__WEBPACK_IMPORTED_MODULE_4__.isDemoUser)(session.user.id)) {\n            try {\n                // Usar Enhanced Gemini directamente para usuarios demo\n                const messageHistory = (context?.previousMessages || []).map((msg, index)=>({\n                        id: msg.id || `msg_${index}`,\n                        text: msg.content,\n                        sender: msg.role === \"user\" ? _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.MessageSender.USER : _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.MessageSender.AI,\n                        timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date(),\n                        metadata: msg.metadata || {}\n                    }));\n                const chatResponse = await _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.enhancedGeminiService.analyzeAndRespond(messageHistory, message, {\n                    currentTopic: context?.currentTopic,\n                    userProfile: {\n                        name: session.user.name || \"estudiante\",\n                        learningLevel: \"intermediate\"\n                    },\n                    emotionalState: emotionalState?.primary_emotion,\n                    userName: context?.userName || session.user.name\n                });\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    conversationId: conversationId || \"demo-conversation-\" + Date.now(),\n                    data: {\n                        type: \"enhanced_chat\",\n                        message: chatResponse.text,\n                        text: chatResponse.text,\n                        content: chatResponse.text,\n                        video: chatResponse.video,\n                        suggestions: chatResponse.suggestions,\n                        audio: chatResponse.audio,\n                        metadata: {\n                            ...chatResponse.metadata,\n                            enhancedFeatures: true,\n                            emotionalAdaptation: true,\n                            videoSupport: !!chatResponse.video,\n                            audioSupport: !!chatResponse.audio?.enabled,\n                            isDemoMode: true\n                        }\n                    },\n                    metadata: {\n                        userId: session.user.id,\n                        action,\n                        isDemoMode: true,\n                        enhancedAI: true,\n                        timestamp: new Date().toISOString()\n                    }\n                });\n            } catch (error) {\n                console.error(\"❌ Enhanced Gemini error for demo user:\", error);\n                // Fallback a respuesta mock solo si Enhanced Gemini falla\n                const mockResponse = generateMockChatResponse(message, action, emotionalState);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    conversationId: conversationId || \"mock-conversation-\" + Date.now(),\n                    data: mockResponse,\n                    metadata: {\n                        userId: session.user.id,\n                        action,\n                        isDemoMode: true,\n                        fallback: true,\n                        timestamp: new Date().toISOString()\n                    }\n                });\n            }\n        }\n        // Get user profile from database with timeout\n        let user;\n        try {\n            user = await Promise.race([\n                _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.user.findUnique({\n                    where: {\n                        id: session.user.id\n                    }\n                }),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Database timeout\")), 10000))\n            ]);\n        } catch (dbError) {\n            console.error(\"\\uD83D\\uDDC4️ Database error getting user, using fallback\");\n            // Use fallback mock response for database issues\n            const mockResponse = generateMockChatResponse(message, action, emotionalState);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                conversationId: conversationId || \"fallback-conversation-\" + Date.now(),\n                data: mockResponse,\n                metadata: {\n                    userId: session.user.id,\n                    action,\n                    isDemoMode: true,\n                    timestamp: new Date().toISOString(),\n                    warning: \"Modo de demostraci\\xf3n - base de datos no disponible\"\n                }\n            });\n        }\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Create or get conversation\n        let conversation = null;\n        if (conversationId) {\n            conversation = await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.conversation.findFirst({\n                where: {\n                    id: conversationId,\n                    userId: session.user.id\n                }\n            });\n        }\n        if (!conversation) {\n            conversation = await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.conversation.create({\n                data: {\n                    userId: session.user.id,\n                    title: message.substring(0, 50) + (message.length > 50 ? \"...\" : \"\"),\n                    context: {\n                        emotional_state: emotionalState?.primary_emotion || \"neutral\",\n                        adaptation_count: 0,\n                        topic: context?.currentTopic\n                    }\n                }\n            });\n        }\n        // Save user message\n        await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.message.create({\n            data: {\n                conversationId: conversation.id,\n                content: message,\n                role: \"user\",\n                emotionalState: emotionalState\n            }\n        });\n        let response;\n        switch(action){\n            case \"enhanced_chat\":\n                response = await handleEnhancedChatInteraction(user, message, context, emotionalState);\n                break;\n            case \"chat\":\n                response = await handleChatInteraction(user, message, context, emotionalState);\n                break;\n            case \"help\":\n                response = await handleHelpRequest(user, message, context, emotionalState);\n                break;\n            case \"exercise_evaluation\":\n                response = await handleExerciseEvaluation(user, message, context, emotionalState);\n                break;\n            default:\n                // Default to enhanced chat for better experience\n                response = await handleEnhancedChatInteraction(user, message, context, emotionalState);\n        }\n        // ...rest of existing code...\n        // New Enhanced Chat Handler using Enhanced Gemini Service\n        async function handleEnhancedChatInteraction(user, message, context, emotionalState) {\n            try {\n                // Convert previous messages to Enhanced Gemini format\n                const messageHistory = (context?.previousMessages || []).map((msg, index)=>({\n                        id: msg.id || `msg_${index}`,\n                        text: msg.content,\n                        sender: msg.role === \"user\" ? _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.MessageSender.USER : _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.MessageSender.AI,\n                        timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date(),\n                        metadata: msg.metadata || {}\n                    }));\n                // Prepare lesson context if available\n                let enhancedContext = {\n                    currentTopic: context?.currentTopic,\n                    userProfile: {\n                        name: user?.firstName || \"estudiante\",\n                        learningLevel: \"intermediate\" // Could be derived from user data\n                    },\n                    emotionalState: emotionalState?.primary_emotion,\n                    userName: context?.userName\n                };\n                // Add lesson-specific context if available\n                if (context?.lessonPrompt) {\n                    enhancedContext = {\n                        ...enhancedContext,\n                        lessonPrompt: context.lessonPrompt,\n                        lessonId: context.lessonId,\n                        courseId: context.courseId,\n                        isLessonMode: context.isLessonMode || true\n                    };\n                }\n                // Call Enhanced Gemini Service\n                const chatResponse = await _lib_enhanced_gemini__WEBPACK_IMPORTED_MODULE_2__.enhancedGeminiService.analyzeAndRespond(messageHistory, message, enhancedContext); // Format response for the frontend\n                return {\n                    type: \"enhanced_chat\",\n                    message: chatResponse.text,\n                    text: chatResponse.text,\n                    video: chatResponse.video,\n                    suggestions: chatResponse.suggestions,\n                    audio: chatResponse.audio,\n                    metadata: {\n                        ...chatResponse.metadata,\n                        enhancedFeatures: true,\n                        emotionalAdaptation: true,\n                        videoSupport: !!chatResponse.video,\n                        audioSupport: !!chatResponse.audio?.enabled\n                    },\n                    currentTopic: context?.currentTopic,\n                    emotionalFeedback: {\n                        detectedEmotion: chatResponse.metadata?.emotion,\n                        confidence: chatResponse.metadata?.confidence,\n                        adaptedResponse: true\n                    }\n                };\n            } catch (error) {\n                console.error(\"❌ Enhanced chat error:\", error);\n                // Fallback to regular Gemini service\n                try {\n                    const fallbackResponse = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.generateChatResponse(message, context);\n                    return {\n                        type: \"chat_fallback\",\n                        message: fallbackResponse.message,\n                        text: fallbackResponse.message,\n                        followUpQuestions: fallbackResponse.followUpQuestions,\n                        relatedTopics: fallbackResponse.relatedTopics,\n                        metadata: {\n                            fallbackMode: true,\n                            error: \"Enhanced service unavailable\"\n                        }\n                    };\n                } catch (fallbackError) {\n                    console.error(\"❌ Fallback chat also failed:\", fallbackError);\n                    // Final fallback - static response\n                    return {\n                        type: \"static_fallback\",\n                        message: `Entiendo tu pregunta sobre \"${message}\". Aunque estoy teniendo problemas técnicos, puedo ayudarte con conceptos de IA. ¿Podrías ser más específico sobre qué tema te interesa?`,\n                        text: `Entiendo tu pregunta sobre \"${message}\". Aunque estoy teniendo problemas técnicos, puedo ayudarte con conceptos de IA. ¿Podrías ser más específico sobre qué tema te interesa?`,\n                        suggestions: [\n                            \"\\xbfQu\\xe9 es machine learning?\",\n                            \"Explica las redes neuronales\",\n                            \"Dame ejemplos de IA\",\n                            \"Ayuda con Python\"\n                        ],\n                        metadata: {\n                            staticFallback: true,\n                            error: \"All AI services unavailable\"\n                        }\n                    };\n                }\n            }\n        }\n        // Mock chat response generator for demo mode\n        function generateMockChatResponse(message, action, emotionalState) {\n            const lowerMessage = message.toLowerCase();\n            // Define mock responses based on common topics\n            if (lowerMessage.includes(\"machine learning\") || lowerMessage.includes(\"ml\")) {\n                return {\n                    type: \"learning_session\",\n                    lesson: {\n                        title: \"Introducci\\xf3n a Machine Learning\",\n                        content: `¡Excelente pregunta sobre Machine Learning! \n\nMachine Learning es una rama de la inteligencia artificial que permite a las computadoras aprender y tomar decisiones basándose en datos, sin ser explícitamente programadas para cada tarea específica.\n\n**Key concepts:**\n- **Supervised algorithms**: Learn from examples with known answers\n- **Unsupervised algorithms**: Find patterns in unlabeled data\n- **Reinforcement learning**: Learn through trial and error\n\n**Practical example:**\nImagine you want to teach a computer to recognize cats in photos. You show it thousands of images labeled as \"cat\" or \"not cat\", and the algorithm learns to identify the characteristics that define a cat.\n\nWould you like me to dive deeper into some specific type of algorithm or would you prefer to see an example with code?`,\n                        objectives: [\n                            \"Understand what Machine Learning is\",\n                            \"Identify the main types\",\n                            \"Visualize practical applications\"\n                        ],\n                        nextSteps: [\n                            \"Explore specific algorithms\",\n                            \"Practice with real datasets\",\n                            \"Implement your first model\"\n                        ]\n                    },\n                    recommendations: [\n                        \"Start with linear regression\",\n                        \"Practice with small datasets\",\n                        \"Use libraries like scikit-learn\"\n                    ],\n                    isDemoMode: true\n                };\n            }\n            if (lowerMessage.includes(\"neural\") || lowerMessage.includes(\"neural networks\")) {\n                return {\n                    type: \"learning_session\",\n                    lesson: {\n                        title: \"Neural Networks Explained\",\n                        content: `Neural networks are computational systems inspired by the functioning of the human brain.\n\n**Basic structure:**\n- **Artificial neurons**: Simple processing units\n- **Layers**: Groups of connected neurons\n- **Weights and biases**: Parameters that adjust during learning\n- **Activation function**: Determines when a neuron is \"activated\"\n\n**How do they learn?**\n1. Receive input data\n2. Process information through layers\n3. Compare result with correct answer\n4. Adjust weights to improve accuracy\n\n**Popular applications:**\n- Image recognition\n- Natural language processing\n- Recommendation systems\n\nWould you like me to show you a simple code example of a neural network?`,\n                        objectives: [\n                            \"Understand the structure of neural networks\",\n                            \"Know the learning process\",\n                            \"Identify applications\"\n                        ],\n                        nextSteps: [\n                            \"Implement a simple network\",\n                            \"Experiment with different architectures\",\n                            \"Learn about deep learning\"\n                        ]\n                    },\n                    recommendations: [\n                        \"Start with perceptrons\",\n                        \"Use TensorFlow or PyTorch\",\n                        \"Practice with datasets like MNIST\"\n                    ],\n                    isDemoMode: true\n                };\n            }\n            if (lowerMessage.includes(\"prompt\") || lowerMessage.includes(\"prompting\")) {\n                return {\n                    type: \"learning_session\",\n                    lesson: {\n                        title: \"Prompt Engineering Fundamentals\",\n                        content: `Prompt Engineering is the art of designing effective instructions for generative AI models.\n\n**Fundamental principles:**\n- **Clarity**: Be specific and direct\n- **Context**: Provide relevant information\n- **Structure**: Organize your prompt logically\n- **Examples**: Use few-shot learning when helpful\n\n**Advanced techniques:**\n1. **Chain-of-Thought**: Ask it to explain its reasoning\n2. **Role Playing**: Define a specific role for the AI\n3. **Template-based**: Use reusable templates\n4. **Iterative refinement**: Improve progressively\n\n**Practical example:**\n❌ Bad: \"Write code\"\n✅ Good: \"As a Python expert, write a function that calculates the factorial of a number. Include explanatory comments and error handling for invalid inputs.\"\n\nWould you like to practice creating prompts for some specific case?`,\n                        objectives: [\n                            \"Master prompt engineering principles\",\n                            \"Apply advanced techniques\",\n                            \"Optimize AI interactions\"\n                        ],\n                        nextSteps: [\n                            \"Practice with different types of prompts\",\n                            \"Experiment with diverse models\",\n                            \"Build your template library\"\n                        ]\n                    },\n                    recommendations: [\n                        \"Experiment with different styles\",\n                        \"Measure the effectiveness of your prompts\",\n                        \"Keep a repository of successful prompts\"\n                    ],\n                    isDemoMode: true\n                };\n            }\n            // Default response for general questions\n            return {\n                type: \"chat_response\",\n                content: `Hello! I'm ProfAI, your personal artificial intelligence tutor. \n\nI noticed you're asking about: \"${message}\"\n\nAs an adaptive professor, I can help you with:\n📚 **Theoretical concepts** - Clear explanations of AI, ML, Deep Learning\n🛠️ **Practical tools** - Code, libraries, implementations\n🧠 **Prompt Engineering** - Optimization of AI interactions\n🎯 **Applied projects** - Real use cases and exercises\n\nMy approach adapts to your learning style and level. I can explain from basic concepts to advanced techniques.\n\nWhat area would you like to dive into? Do you prefer to start with theory, see practical examples, or do you have a specific project in mind?`,\n                suggestions: [\n                    \"What is machine learning and how to get started?\",\n                    \"Explain neural networks with examples\",\n                    \"How to create better AI prompts?\",\n                    \"I want to do an AI project, where do I start?\"\n                ],\n                isDemoMode: true\n            };\n        }\n        // Handler for general chat interactions\n        async function handleChatInteraction(user, message, context, emotionalState) {\n            // Determine the topic and difficulty  \n            const topic = extractTopicFromMessage(message) || context?.currentTopic || \"AI concepts\";\n            const difficulty = determineUserDifficulty(user);\n            // Generate personalized lesson using Gemini\n            const lesson = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.generateLesson(topic, difficulty);\n            // Check if user wants exercises\n            const includeExercises = shouldIncludeExercises(message);\n            let exercise = null;\n            if (includeExercises) {\n                exercise = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.generateExercise(topic, difficulty);\n            }\n            return {\n                type: \"learning_session\",\n                lesson,\n                exercise,\n                recommendations: generateRecommendations(emotionalState, lesson),\n                nextSteps: generateNextSteps(lesson, exercise)\n            };\n        }\n        // Handler for help requests\n        async function handleHelpRequest(user, message, context, emotionalState) {\n            const currentContent = context?.lessonId ? await getLessonContent(context.lessonId) : null;\n            if (currentContent) {\n                // For now, provide a simple reformulated response since reformulateContent doesn't exist\n                const reformulatedContent = `Entiendo tu confusión sobre el tema. Déjame explicarlo de otra manera: ${currentContent.toString()}`;\n                return {\n                    type: \"help_response\",\n                    reformulatedContent,\n                    supportMessage: generateSupportMessage(emotionalState?.primary_emotion || \"confused\"),\n                    suggestions: [\n                        \"Would you like me to break this down further?\",\n                        \"Should I provide more examples?\",\n                        \"Do you want to try a practice exercise?\"\n                    ]\n                };\n            }\n            // General help without specific content\n            const helpResponse = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.generateContent(`The student is asking for help: \"${message}\". They seem ${emotionalState?.primary_emotion || \"neutral\"}. Provide encouraging, specific help.`, buildSystemPrompt(emotionalState, {}));\n            return {\n                type: \"general_help\",\n                content: helpResponse,\n                supportMessage: generateSupportMessage(emotionalState?.primary_emotion || \"confused\")\n            };\n        }\n        // Handler for exercise submissions\n        async function handleExerciseSubmission(user, submission, context) {\n            if (!context?.exerciseId) {\n                throw new Error(\"Exercise ID required for submission evaluation\");\n            }\n            const exercise = await getExerciseDetails(context.exerciseId);\n            const evaluation = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.evaluateSubmission(exercise, {\n                code: submission,\n                timestamp: new Date().toISOString()\n            });\n            // Update user progress\n            await updateUserProgress(user.id, context.exerciseId, evaluation);\n            return {\n                type: \"exercise_evaluation\",\n                evaluation,\n                progressUpdate: await getUserProgressUpdate(user.id),\n                nextSteps: generatePostEvaluationSteps(evaluation)\n            };\n        }\n        // Handler for reformulation requests\n        async function handleReformulationRequest(user, feedback, context, emotionalState) {\n            const currentContent = context?.lessonId ? await getLessonContent(context.lessonId) : null;\n            if (!currentContent) {\n                return {\n                    type: \"error\",\n                    message: \"No content available for reformulation\"\n                };\n            }\n            // Simple reformulation since the API method doesn't exist yet\n            const reformulatedContent = `Entiendo tu confusión. Déjame explicarlo de otra manera: ${currentContent}`;\n            return {\n                type: \"reformulation\",\n                originalEmotion: emotionalState?.primary_emotion || \"confused\",\n                newExplanation: reformulatedContent,\n                encouragement: generateEncouragementMessage(),\n                suggestions: [\n                    \"Is this clearer now?\",\n                    \"Would you like even more examples?\",\n                    \"Ready to try a practice exercise?\"\n                ]\n            };\n        }\n        // Utility functions\n        function extractTopicFromMessage(message) {\n            const aiTopics = [\n                \"machine learning\",\n                \"deep learning\",\n                \"neural networks\",\n                \"transformers\",\n                \"llm\",\n                \"gpt\",\n                \"prompt engineering\",\n                \"fine-tuning\",\n                \"embeddings\",\n                \"rag\",\n                \"retrieval augmented generation\",\n                \"langchain\",\n                \"openai\",\n                \"hugging face\"\n            ];\n            const lowerMessage = message.toLowerCase();\n            for (const topic of aiTopics){\n                if (lowerMessage.includes(topic)) {\n                    return topic;\n                }\n            }\n            return null;\n        }\n        function determineUserDifficulty(user) {\n            const skillLevel = user.skillLevel;\n            if (!skillLevel) return \"beginner\";\n            const levels = [\n                skillLevel.theory,\n                skillLevel.tooling,\n                skillLevel.prompting\n            ].filter(Boolean);\n            const avgLevel = levels.reduce((sum, level)=>{\n                let score;\n                if (level === \"beginner\") {\n                    score = 1;\n                } else if (level === \"intermediate\") {\n                    score = 2;\n                } else {\n                    score = 3;\n                }\n                return sum + score;\n            }, 0) / levels.length;\n            if (avgLevel <= 1.5) return \"beginner\";\n            if (avgLevel <= 2.5) return \"intermediate\";\n            return \"advanced\";\n        }\n        function determineLearningStyle(user) {\n            const preferences = user.preferences;\n            return preferences?.preferred_format || \"hybrid\";\n        }\n        function getUserBackground(user) {\n            const skillLevel = user.skillLevel;\n            if (!skillLevel) return \"General audience with mixed background\";\n            const levels = [];\n            if (skillLevel.theory) levels.push(`Theory: ${skillLevel.theory}`);\n            if (skillLevel.tooling) levels.push(`Tooling: ${skillLevel.tooling}`);\n            if (skillLevel.prompting) levels.push(`Prompting: ${skillLevel.prompting}`);\n            return levels.join(\", \");\n        }\n        function shouldIncludeExercises(message) {\n            const practiceKeywords = [\n                \"practice\",\n                \"exercise\",\n                \"code\",\n                \"example\",\n                \"try\",\n                \"build\",\n                \"implement\"\n            ];\n            const lowerMessage = message.toLowerCase();\n            return practiceKeywords.some((keyword)=>lowerMessage.includes(keyword));\n        }\n        function buildSystemPrompt(emotionalState, context) {\n            const userName = context?.userName || \"student\";\n            const emotion = emotionalState?.primary_emotion || \"neutral\";\n            const isConfused = emotionalState?.detected_confusion || false;\n            let basePrompt = `You are ProfAI, an expert professor in artificial intelligence with advanced emotional intelligence. \n\nYour personality is:\n- Empathetic and adaptive\n- Clear in explanations but academically rigorous  \n- You detect emotions and adjust your teaching style\n- You combine solid theory with practical examples\n- You use analogies when necessary to simplify\n\nThe student is called ${userName}.`;\n            // Adaptation based on emotional state\n            if (isConfused || emotion === \"confusion\") {\n                basePrompt += `\\n\\n🧠 EMOTIONAL STATE DETECTED: CONFUSION\n- Use simpler step-by-step explanations\n- Include real-world analogies\n- Ask if they need more clarification\n- Break complex concepts into small parts\n- Be especially patient and encouraging`;\n            } else if (emotion === \"frustration\") {\n                basePrompt += `\\n\\n😤 EMOTIONAL STATE DETECTED: FRUSTRATION  \n- Be extra understanding and encouraging\n- Offer a different approach to the problem\n- Suggest taking a break if necessary\n- Simplify the explanation\n- Highlight that frustration is normal in learning`;\n            } else if (emotion === \"curiosity\") {\n                basePrompt += `\\n\\n🤔 EMOTIONAL STATE DETECTED: CURIOSITY\n- Can go deeper into details\n- Add extra interesting information\n- Suggest additional resources\n- Connect with related topics\n- Encourage exploration`;\n            }\n            basePrompt += `\\n\\nALWAYS RESPOND IN ENGLISH in a clear, structured and educational way. Use emojis occasionally to make the conversation more friendly.`;\n            return basePrompt;\n        }\n        function generateRecommendations(emotionalState, lesson) {\n            const recommendations = [];\n            if (emotionalState?.primary_emotion === \"confused\") {\n                recommendations.push(\"Take your time with this concept\");\n                recommendations.push(\"Review the examples carefully\");\n            } else if (emotionalState?.primary_emotion === \"engaged\") {\n                recommendations.push(\"Great enthusiasm! Keep going\");\n                recommendations.push(\"Ready for more advanced topics\");\n            }\n            return recommendations;\n        }\n        function generateNextSteps(lesson, exercise) {\n            const steps = [];\n            if (lesson) {\n                steps.push(\"Review the lesson concepts\");\n            }\n            if (exercise) {\n                steps.push(\"Try the practice exercise\");\n            } else {\n                steps.push(\"Ask for a practice exercise when ready\");\n            }\n            steps.push(\"Let me know if you need clarification\");\n            return steps;\n        }\n        function generateSupportMessage(emotion) {\n            const supportMessages = {\n                frustrated: \"I understand this can be challenging. Let's break it down step by step.\",\n                confused: \"No worries! Let me try a different approach to explain this.\",\n                bored: \"Ready for something more challenging? Let's kick it up a notch!\",\n                neutral: \"You're doing great! Keep up the good work.\",\n                engaged: \"I love your enthusiasm! Let's keep building on that momentum.\"\n            };\n            return supportMessages[emotion] || supportMessages.neutral;\n        }\n        function generateEncouragementMessage() {\n            const messages = [\n                \"Learning is a journey, and every question helps you grow!\",\n                \"Great job asking for clarification - that's how experts think!\",\n                \"Your curiosity is exactly what makes a great AI practitioner!\"\n            ];\n            return messages[Math.floor(Math.random() * messages.length)];\n        }\n        function generatePostEvaluationSteps(evaluation) {\n            const steps = [];\n            if (evaluation.score >= 80) {\n                steps.push(\"Excellent work! Ready for the next challenge\");\n            } else if (evaluation.score >= 60) {\n                steps.push(\"Good progress! Review feedback and try again\");\n            } else {\n                steps.push(\"Review the concepts and try again\");\n                steps.push(\"Ask for help if you need clarification\");\n            }\n            return steps;\n        }\n        // Database helper functions - temporary implementations\n        async function getLessonContent(lessonId) {\n            return `Contenido de la lección ${lessonId}: Este es contenido de ejemplo mientras se implementa la base de datos completa.`;\n        }\n        async function getExerciseDetails(exerciseId) {\n            // Temporary mock data while database tables are being implemented\n            return {\n                title: `Ejercicio ${exerciseId}`,\n                description: \"Ejercicio de ejemplo mientras se implementa la base de datos\",\n                instructions: [\n                    \"Completa el ejercicio\",\n                    \"Sigue las mejores pr\\xe1cticas\"\n                ],\n                evaluationCriteria: [\n                    \"Correctitud\",\n                    \"Estilo de c\\xf3digo\",\n                    \"Eficiencia\"\n                ]\n            };\n        }\n        async function updateUserProgress(userId, exerciseId, evaluation) {\n            console.log(`Progress updated for user ${userId} on exercise ${exerciseId}`);\n            // Update user stats (this table exists)\n            if (evaluation.score && evaluation.score >= 70) {\n                await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        totalLessonsCompleted: {\n                            increment: 1\n                        },\n                        lastActiveAt: new Date()\n                    }\n                });\n            }\n        }\n        async function getUserProgressUpdate(userId) {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.user.findUnique({\n                where: {\n                    id: userId\n                },\n                select: {\n                    totalLessonsCompleted: true,\n                    currentStreak: true,\n                    lastActiveAt: true\n                }\n            });\n            return user;\n        }\n        // Handler for exercise evaluation  \n        async function handleExerciseEvaluation(user, message, context, emotionalState) {\n            if (!context?.exerciseId) {\n                // If no specific exercise, treat as general code evaluation\n                const evaluation = await _lib_gemini__WEBPACK_IMPORTED_MODULE_1__.geminiService.generateContent(`Evaluate this student's work: \"${message}\". Provide constructive feedback.`, buildSystemPrompt(emotionalState, context));\n                return {\n                    type: \"code_evaluation\",\n                    feedback: evaluation,\n                    score: null,\n                    suggestions: [\n                        \"\\xbfQuieres intentar otro ejercicio?\",\n                        \"\\xbfNecesitas m\\xe1s explicaci\\xf3n sobre alg\\xfan concepto?\",\n                        \"\\xbfTe gustar\\xeda ver un ejemplo mejorado?\"\n                    ]\n                };\n            }\n            return await handleExerciseSubmission(user, message, context);\n        }\n        // Save assistant response\n        await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.message.create({\n            data: {\n                conversationId: conversation.id,\n                content: typeof response === \"string\" ? response : JSON.stringify(response),\n                role: \"assistant\"\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            conversationId: conversation.id,\n            data: response,\n            metadata: {\n                userId: session.user.id,\n                action,\n                timestamp: new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ Chat API Error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\",\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            fallbackResponse: {\n                type: \"error_fallback\",\n                message: \"Disculpa, estoy teniendo problemas t\\xe9cnicos. \\xbfPuedes intentar reformular tu pregunta?\",\n                suggestions: [\n                    \"\\xbfQu\\xe9 es machine learning?\",\n                    \"Expl\\xedcame las redes neuronales\",\n                    \"Ay\\xfadame con prompt engineering\",\n                    \"Quiero aprender sobre IA\"\n                ]\n            }\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/audio-service.ts":
/*!******************************!*\
  !*** ./lib/audio-service.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioService: () => (/* binding */ AudioService),\n/* harmony export */   audioService: () => (/* binding */ audioService)\n/* harmony export */ });\n/**\n * Audio Service for ProfAI\n * Handles text-to-speech functionality using Web Speech API and optional external services\n */ class AudioService {\n    constructor(){\n        this.synthesis = null;\n        this.voices = [];\n        this.currentUtterance = null;\n        this.isInitialized = false;\n        if (false) {}\n    }\n    async initializeVoices() {\n        if (!this.synthesis) return;\n        // Load available voices\n        const loadVoices = ()=>{\n            this.voices = this.synthesis.getVoices();\n            this.isInitialized = true;\n        };\n        if (this.synthesis.getVoices().length > 0) {\n            loadVoices();\n        } else {\n            this.synthesis.onvoiceschanged = loadVoices;\n        }\n    }\n    /**\n   * Get available voices for the specified language\n   */ getAvailableVoices(language = \"en-US\") {\n        return this.voices.filter((voice)=>voice.lang.startsWith(language.substring(0, 2)));\n    }\n    /**\n   * Get the best voice for English (ProfAI's default language)\n   */ getBestEnglishVoice() {\n        // Prefer specific English voices\n        const englishVoices = this.getAvailableVoices(\"en\");\n        // Priority order for English voices\n        const preferredNames = [\n            \"Google US English\",\n            \"Microsoft Zira - English (United States)\",\n            \"Microsoft David - English (United States)\",\n            \"Alex\",\n            \"Samantha\",\n            \"Victoria\"\n        ];\n        for (const preferred of preferredNames){\n            const voice = englishVoices.find((v)=>v.name.includes(preferred));\n            if (voice) return voice;\n        }\n        // Fallback to any English voice\n        return englishVoices[0] || null;\n    }\n    /**\n   * Convert text to speech using Web Speech API\n   */ async speakText(text, options = {}) {\n        if (!this.synthesis) {\n            return {\n                success: false,\n                error: \"Speech synthesis not supported\"\n            };\n        }\n        // Clean text for better speech\n        const cleanText = this.cleanTextForSpeech(text);\n        return new Promise((resolve)=>{\n            try {\n                // Stop any current speech\n                this.stopSpeaking();\n                const utterance = new SpeechSynthesisUtterance(cleanText);\n                // Set voice options\n                const voice = options.voiceName ? this.voices.find((v)=>v.name === options.voiceName) : this.getBestEnglishVoice();\n                if (voice) utterance.voice = voice;\n                utterance.rate = options.rate || 0.9; // Slightly slower for education\n                utterance.pitch = options.pitch || 1.0;\n                utterance.volume = options.volume || 0.8;\n                utterance.lang = options.language || \"en-US\";\n                // Event handlers\n                utterance.onstart = ()=>{\n                    this.currentUtterance = utterance;\n                };\n                utterance.onend = ()=>{\n                    this.currentUtterance = null;\n                    resolve({\n                        success: true,\n                        duration: this.estimateDuration(cleanText)\n                    });\n                };\n                utterance.onerror = (event)=>{\n                    this.currentUtterance = null;\n                    resolve({\n                        success: false,\n                        error: `Speech error: ${event.error}`\n                    });\n                };\n                // Start speaking\n                this.synthesis.speak(utterance);\n            } catch (error) {\n                resolve({\n                    success: false,\n                    error: error instanceof Error ? error.message : \"Unknown error\"\n                });\n            }\n        });\n    }\n    /**\n   * Stop current speech\n   */ stopSpeaking() {\n        if (this.synthesis) {\n            this.synthesis.cancel();\n            this.currentUtterance = null;\n        }\n    }\n    /**\n   * Check if currently speaking\n   */ isSpeaking() {\n        return this.synthesis ? this.synthesis.speaking : false;\n    }\n    /**\n   * Pause current speech\n   */ pauseSpeaking() {\n        if (this.synthesis && this.synthesis.speaking) {\n            this.synthesis.pause();\n        }\n    }\n    /**\n   * Resume paused speech\n   */ resumeSpeaking() {\n        if (this.synthesis && this.synthesis.paused) {\n            this.synthesis.resume();\n        }\n    }\n    /**\n   * Clean text for better speech synthesis\n   */ cleanTextForSpeech(text) {\n        return text// Remove markdown formatting\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Bold\n        .replace(/\\*(.*?)\\*/g, \"$1\") // Italic\n        .replace(/`(.*?)`/g, \"$1\") // Code\n        .replace(/#{1,6}\\s*(.*)/g, \"$1\") // Headers\n        .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\") // Links\n        // Remove emojis (basic)\n        .replace(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu, \"\")// Clean up extra spaces and breaks\n        .replace(/\\n\\s*\\n/g, \". \").replace(/\\n/g, \" \").replace(/\\s+/g, \" \").trim();\n    }\n    /**\n   * Estimate speech duration in seconds\n   */ estimateDuration(text) {\n        // Average speaking rate: ~150 words per minute for educational content\n        const wordsPerMinute = 130; // Slower for AI education\n        const wordCount = text.split(/\\s+/).length;\n        return Math.ceil(wordCount / wordsPerMinute * 60);\n    }\n    /**\n   * Generate audio using external TTS service (fallback/enhancement)\n   */ async generateAudioWithExternalService(text, voice = \"es-ES-Standard-A\") {\n        // This would integrate with services like Google Cloud TTS, Azure Cognitive Services, etc.\n        // For now, we'll return a placeholder\n        try {\n            // Placeholder for external TTS integration\n            // Could integrate with Google Cloud TTS, Azure, AWS Polly, etc.\n            return {\n                success: false,\n                error: \"External TTS service not configured\"\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"External TTS error\"\n            };\n        }\n    }\n    /**\n   * Check if audio features are supported\n   */ isSupported() {\n        return this.synthesis !== null;\n    }\n    /**\n   * Get debug information about audio capabilities\n   */ getDebugInfo() {\n        return {\n            isSupported: this.isSupported(),\n            isInitialized: this.isInitialized,\n            voicesCount: this.voices.length,\n            currentlySpeaking: this.isSpeaking(),\n            availableEnglishVoices: this.getAvailableVoices(\"en\").map((v)=>({\n                    name: v.name,\n                    lang: v.lang,\n                    default: v.default\n                }))\n        };\n    }\n}\n// Create singleton instance\nconst audioService = new AudioService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/audio-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0,\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    }\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZDO0FBRTdDLE1BQU1DLGtCQUFrQkM7QUFJakIsTUFBTUMsU0FBU0YsZ0JBQWdCRSxNQUFNLElBQUksSUFBSUgsd0RBQVlBLENBQUM7SUFDL0RJLEtBQUtDLEtBQXlCLEdBQWdCO1FBQUM7UUFBUztRQUFTO0tBQU8sR0FBRyxDQUFTO0lBQ3BGQyxhQUFhO1FBQ1hDLElBQUk7WUFDRkMsS0FBS0gsUUFBUUksR0FBRyxDQUFDQyxZQUFZO1FBQy9CO0lBQ0Y7QUFDRixHQUFFO0FBRUYsSUFBSUwsSUFBeUIsRUFBY0osZ0JBQWdCRSxNQUFNLEdBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbGliL2RiLnRzPzFkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnXG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/IG5ldyBQcmlzbWFDbGllbnQoe1xuICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gWydxdWVyeScsICdlcnJvcicsICd3YXJuJ10gOiBbJ2Vycm9yJ10sXG4gIGRhdGFzb3VyY2VzOiB7XG4gICAgZGI6IHtcbiAgICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMXG4gICAgfVxuICB9XG59KVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYVxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJsb2ciLCJwcm9jZXNzIiwiZGF0YXNvdXJjZXMiLCJkYiIsInVybCIsImVudiIsIkRBVEFCQVNFX1VSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/enhanced-gemini.ts":
/*!********************************!*\
  !*** ./lib/enhanced-gemini.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedGeminiService: () => (/* binding */ EnhancedGeminiService),\n/* harmony export */   MessageSender: () => (/* binding */ MessageSender),\n/* harmony export */   enhancedGeminiService: () => (/* binding */ enhancedGeminiService),\n/* harmony export */   geminiService: () => (/* binding */ enhancedGeminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _video_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./video-service */ \"(rsc)/./lib/video-service.ts\");\n/* harmony import */ var _audio_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio-service */ \"(rsc)/./lib/audio-service.ts\");\n/**\n * Enhanced ProfAI Gemini Service with Chat Integration\n * Integrates with existing ProfAI infrastructure while adding advanced chat capabilities\n */ \n\n\nvar MessageSender;\n(function(MessageSender) {\n    MessageSender[\"USER\"] = \"user\";\n    MessageSender[\"AI\"] = \"ai\";\n})(MessageSender || (MessageSender = {}));\nclass EnhancedGeminiService {\n    constructor(){\n        const apiKey = process.env.GEMINI_API_KEY || process.env.API_KEY;\n        if (!apiKey) {\n            console.error(\"GEMINI_API_KEY or API_KEY environment variable not set.\");\n            throw new Error(\"API key is required\");\n        }\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n        this.model = this.genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash-exp\"\n        });\n    }\n    /**\n   * Generate initial lesson content based on onboarding data and selected topic\n   */ async generateInitialLesson(onboardingData, lessonTopic) {\n        let prompt;\n        if (lessonTopic) {\n            prompt = `You are ProfAI, an MIT-style AI professor. The student has selected a topic from their personalized roadmap: \"${lessonTopic}\".\n\n      Start a conversation about this specific topic. Ask them what they'd like to know about it, or if they'd prefer a general overview. \n      \n      Keep it welcoming, concise, and use markdown for formatting. Your response should be 2-3 sentences max.`;\n        } else if (onboardingData?.themeId) {\n            const selectedTheme = onboardingData.themeId;\n            prompt = `You are ProfAI, an MIT-style AI professor. You are greeting a student who has just completed their detailed onboarding.\n      \n      - Their primary goal is: ${onboardingData.learningGoals[0]}\n      - They are starting with the theme: ${selectedTheme}\n      - Their experience level: ${onboardingData.elearningExperience}\n      - Preferred learning methods: ${onboardingData.learningMethods.join(\", \")}\n      \n      Welcome them back to the chat interface. Let them know their personalized plan is ready on the home page and that here, they can ask any question to start their first lesson. \n      \n      Keep it short (2-3 sentences), welcoming, and encouraging. Use markdown for formatting.`;\n        } else {\n            prompt = \"Welcome back! Let's continue our lesson. What would you like to discuss today?\";\n        }\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"Error generating initial lesson:\", error);\n            return \"Hello! I'm ProfAI, your personal AI tutor. I'm here to help you learn. Where would you like to start today?\";\n        }\n    }\n    /**\n   * Generate video playlist based on roadmap items\n   */ async generateVideoPlaylist(roadmap) {\n        const roadmapTitles = roadmap.map((item)=>item.title).join(\", \");\n        const prompt = `Based on the following AI learning topics, find one highly relevant, educational YouTube video for each topic from a reputable source. \n    \n    **IMPORTANT**: The videos must be publicly available and allow embedding on other websites.\n\n    Topics: \"${roadmapTitles}\"\n\n    Prioritize videos from channels that usually allow embedding, like:\n    - Tech educators (3Blue1Brown, Fireship, TwoMinutePapers)\n    - Official company channels (Google AI, OpenAI, DeepMind)\n    - Educational channels (Crash Course, Khan Academy)\n    \n    Avoid university lectures which often restrict embedding.\n\n    Return ONLY a valid JSON array of objects. Each object must have \"videoId\" and \"title\" properties. \n    Do not include the full YouTube URL, only the video ID from the URL.\n    \n    Format:\n    [\n        { \"videoId\": \"G2fqAlgmoPo\", \"title\": \"What is Generative AI?\" },\n        { \"videoId\": \"iR2O2GPbB0E\", \"title\": \"What are Large Language Models?\" }\n    ]`;\n        try {\n            const config = {\n                temperature: 0.3,\n                maxOutputTokens: 2048\n            };\n            const result = await this.model.generateContent({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: config\n            });\n            const response = await result.response;\n            let jsonString = response.text();\n            // Clean up the response to extract pure JSON\n            jsonString = this.cleanJsonResponse(jsonString);\n            const parsedVideos = JSON.parse(jsonString);\n            return parsedVideos.map((video)=>({\n                    ...video,\n                    thumbnailUrl: `https://i.ytimg.com/vi/${video.videoId}/hqdefault.jpg`\n                }));\n        } catch (error) {\n            console.error(\"Error generating video playlist:\", error);\n            return this.getFallbackVideos(roadmap);\n        }\n    }\n    /**\n   * Generate personalized learning roadmap\n   */ async generateRoadmap(onboardingData, themeName) {\n        const prompt = `You are an expert curriculum designer for AI education. Create a personalized 5-step learning roadmap for the topic \"${themeName}\".\n\n    Student Profile:\n    - Learning Goals: ${onboardingData.learningGoals.join(\", \")}\n    - Experience Level: ${onboardingData.elearningExperience}\n    - Preferred Learning Methods: ${onboardingData.learningMethods.join(\", \")}\n    - Current AI Usage: ${onboardingData.aiUsage}\n    - AI Understanding: \"${onboardingData.aiUnderstanding}\"\n\n    Requirements:\n    - Create exactly 5 learning modules\n    - Tailor complexity to their experience level\n    - Match their preferred learning methods\n    - Align with their stated goals\n    - Progress logically from basics to advanced\n\n    Return ONLY a valid JSON array of objects with \"title\" and \"description\" properties.\n    \n    Example format:\n    [\n      {\n        \"title\": \"AI Fundamentals\",\n        \"description\": \"Start with core concepts and terminology you'll use throughout your AI journey.\"\n      }\n    ]`;\n        try {\n            const config = {\n                temperature: 0.7,\n                maxOutputTokens: 1500\n            };\n            const result = await this.model.generateContent({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: config\n            });\n            const response = await result.response;\n            let jsonString = this.cleanJsonResponse(response.text());\n            const roadmapItems = JSON.parse(jsonString);\n            return Array.isArray(roadmapItems) ? roadmapItems : this.getFallbackRoadmap(themeName);\n        } catch (error) {\n            console.error(\"Error generating roadmap:\", error);\n            return this.getFallbackRoadmap(themeName);\n        }\n    }\n    /**\n   * Enhanced chat analysis and response with video and audio integration\n   */ async analyzeAndRespond(history, userInput, context) {\n        try {\n            const conversationHistory = this.formatHistory(history);\n            const detectedEmotion = this.detectEmotionalState(userInput, history);\n            const currentEmotion = context?.emotionalState || detectedEmotion;\n            const detectedTopic = this.detectTopicFromInput(userInput);\n            let basePrompt = `You are ProfAI, an MIT-style AI professor specializing in AI education. Your teaching style is adaptive, encouraging, and visual.\n\n      **Context:**`;\n            if (context?.currentTopic) {\n                basePrompt += `\\nCurrent Topic: ${context.currentTopic}`;\n            }\n            if (context?.userName) {\n                basePrompt += `\\nStudent Name: ${context.userName}`;\n            }\n            if (currentEmotion) {\n                basePrompt += `\\nStudent Emotional State: ${currentEmotion}`;\n            }\n            if (context?.userProfile) {\n                basePrompt += `\\nUser Profile: ${JSON.stringify(context.userProfile)}`;\n            }\n            // Add lesson-specific context if available\n            if (context?.isLessonMode && context?.lessonPrompt) {\n                basePrompt += `\n      \n      **LESSON CONTEXT - VERY IMPORTANT:**\n      You are now operating in LESSON MODE for Course: ${context.courseId}, Lesson: ${context.lessonId}\n      \n      SPECIFIC LESSON PROMPT TO FOLLOW:\n      ${context.lessonPrompt}\n      \n      **CRITICAL INSTRUCTIONS:**\n      - Follow the specific lesson prompt above carefully\n      - Use the lesson context, examples, and guidelines provided\n      - Adapt your teaching style to the lesson's objectives\n      - Reference lesson-specific content when appropriate\n      - If the lesson mentions video/code/quiz resources, reference them naturally`;\n            }\n            const prompt = `${basePrompt}\n\n      **Conversation History:**\n      ${conversationHistory}\n\n      **Student's Latest Message:** \"${userInput}\"\n\n      **Your Tasks:**\n      1. ${context?.isLessonMode ? \"FIRST: Apply the specific lesson prompt and context above\" : \"Analyze the student's comprehension and emotional state\"}\n      2. Detect the main AI/ML topic being discussed (${detectedTopic || \"general AI\"})\n      3. Determine if a YouTube video would help explain the concept\n      4. Create an audio-friendly response (avoid complex formatting)\n      5. Craft an adaptive response (2-4 sentences):\n         - If struggling: be encouraging and simplify\n         - If confident: provide challenges\n         - If confused: break down concepts\n         - If engaged: maintain momentum\n\n      6. **Video Format**: If you recommend a video, append this EXACT format at the end:\n         @@VIDEO_INFO@@{\"videoId\": \"VIDEO_ID\", \"title\": \"VIDEO_TITLE\"}\n\n      **Examples:**\n\n      *With Video:*\n      Great question about neural networks! The learning process is called backpropagation. This video explains it visually, which should help clarify the concept.\n      @@VIDEO_INFO@@{\"videoId\": \"Ilg3gGewQ5U\", \"title\": \"What is backpropagation?\"}\n\n      *Without Video:*\n      Perfect understanding! You've grasped the core concept of machine learning. Ready for the next challenge?\n\n      **Audio Guidelines:**\n      - Keep responses conversational and natural for text-to-speech\n      - Avoid complex markdown formatting in speech portions\n      - Use clear, educational language\n      - Include emotional support when needed\n\n      Generate your response now:`;\n            const config = {\n                temperature: 0.8,\n                maxOutputTokens: 1000\n            };\n            const result = await this.model.generateContent({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: config\n            });\n            const response = await result.response;\n            const parsedResponse = this.parseVideoResponse(response.text(), {\n                emotionalState: currentEmotion,\n                confidence: this.calculateConfidence(userInput, history),\n                userName: context?.userName,\n                currentTopic: context?.currentTopic,\n                detectedTopic\n            });\n            // Add intelligent suggestions based on context\n            parsedResponse.suggestions = this.generateContextualSuggestions(userInput, parsedResponse.text, currentEmotion, context?.currentTopic || detectedTopic || undefined);\n            // Enhanced audio integration\n            parsedResponse.audio = {\n                enabled: _audio_service__WEBPACK_IMPORTED_MODULE_2__.audioService.isSupported(),\n                autoplay: currentEmotion === \"frustrated\" || currentEmotion === \"confused\",\n                voice: \"spanish-educational\"\n            };\n            // Enhanced metadata\n            parsedResponse.metadata = {\n                ...parsedResponse.metadata,\n                audioEnabled: parsedResponse.audio.enabled,\n                audioSupported: _audio_service__WEBPACK_IMPORTED_MODULE_2__.audioService.isSupported(),\n                hasVideo: !!parsedResponse.video,\n                topicDetected: detectedTopic || undefined,\n                enhancedFeatures: true\n            };\n            return parsedResponse;\n        } catch (error) {\n            console.error(\"Error in AI response generation:\", error);\n            return this.getFallbackResponse(userInput, context?.emotionalState);\n        }\n    }\n    /**\n   * Generate theme description for dashboard\n   */ async generateThemeDescription(themeName) {\n        const prompt = `Generate a concise, engaging description for the AI learning theme \"${themeName}\". \n    \n    Requirements:\n    - 2-3 sentences maximum\n    - Highlight what students will learn\n    - Use encouraging, professional tone\n    - Focus on practical outcomes\n    \n    Example: \"Master the fundamentals of machine learning through hands-on projects and real-world examples. You'll learn to build, train, and deploy your first ML models while understanding the theory that makes them work.\"`;\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            return response.text().trim();\n        } catch (error) {\n            console.error(\"Error generating theme description:\", error);\n            return `Explore the exciting world of ${themeName} with hands-on learning and practical applications.`;\n        }\n    }\n    /**\n   * Generate lesson content for specific topics\n   */ async generateLessonContent(themeName, lessonTitle) {\n        const prompt = `You are ProfAI, an expert AI tutor. Generate content for a micro-learning lesson.\n    \n    Theme: \"${themeName}\"\n    Lesson: \"${lessonTitle}\"\n\n    Requirements:\n    - Clear, beginner-friendly explanations\n    - Use practical examples and analogies\n    - Include 3-4 paragraphs of content\n    - End with a thought-provoking question\n    - Use markdown formatting for readability\n    - Keep it conversational and engaging\n\n    Structure:\n    1. Brief introduction to the concept\n    2. Core explanation with examples\n    3. Real-world applications\n    4. Understanding check question`;\n        try {\n            const config = {\n                temperature: 0.7,\n                maxOutputTokens: 1500\n            };\n            const result = await this.model.generateContent({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: config\n            });\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"Error generating lesson content:\", error);\n            return `# ${lessonTitle}\\n\\nLo siento, no pude generar el contenido de esta lección en este momento. Por favor, intenta de nuevo más tarde.`;\n        }\n    }\n    // Helper methods\n    formatHistory(messages) {\n        return messages.slice(-10) // Keep last 10 messages for context\n        .map((m)=>`${m.sender === \"user\" ? \"Estudiante\" : \"ProfAI\"}: ${m.text}`).join(\"\\n\");\n    }\n    detectEmotionalState(userInput, history) {\n        const input = userInput.toLowerCase();\n        // Frustrated indicators\n        if (input.includes(\"no entiendo\") || input.includes(\"confundido\") || input.includes(\"dif\\xedcil\") || input.includes(\"no comprendo\") || input.includes(\"frustrado\") || input.includes(\"no funciona\")) {\n            return \"frustrated\";\n        }\n        // Confused indicators\n        if (input.includes(\"\\xbfqu\\xe9 es\") || input.includes(\"explica\") || input.includes(\"c\\xf3mo\") || input.includes(\"por qu\\xe9\") || input.includes(\"no s\\xe9\") || input.includes(\"ayuda\")) {\n            return \"confused\";\n        }\n        // Engaged indicators\n        if (input.includes(\"genial\") || input.includes(\"interesante\") || input.includes(\"m\\xe1s\") || input.includes(\"avanzado\") || input.includes(\"siguiente\") || input.includes(\"profundizar\")) {\n            return \"engaged\";\n        }\n        // Excited indicators\n        if (input.includes(\"wow\") || input.includes(\"incre\\xedble\") || input.includes(\"fascinante\") || input.includes(\"!\")) {\n            return \"excited\";\n        }\n        return \"neutral\";\n    }\n    calculateConfidence(userInput, history) {\n        let confidence = 0.5; // Base confidence\n        // Increase confidence based on conversation length\n        confidence += Math.min(history.length * 0.05, 0.3);\n        // Increase confidence for specific questions\n        if (userInput.includes(\"?\") || userInput.includes(\"qu\\xe9\") || userInput.includes(\"c\\xf3mo\")) {\n            confidence += 0.2;\n        }\n        // Decrease confidence for vague inputs\n        if (userInput.length < 10) {\n            confidence -= 0.2;\n        }\n        return Math.max(0.1, Math.min(1.0, confidence));\n    }\n    detectTopicFromInput(userInput) {\n        const input = userInput.toLowerCase();\n        // Define topic detection patterns\n        const topicPatterns = {\n            \"machine-learning\": [\n                \"machine learning\",\n                \"aprendizaje autom\\xe1tico\",\n                \"ml\",\n                \"algoritmos\",\n                \"predicci\\xf3n\"\n            ],\n            \"neural-networks\": [\n                \"redes neuronales\",\n                \"neural network\",\n                \"perceptr\\xf3n\",\n                \"neuronas\",\n                \"backpropagation\"\n            ],\n            \"deep-learning\": [\n                \"deep learning\",\n                \"aprendizaje profundo\",\n                \"rnn\",\n                \"cnn\",\n                \"lstm\",\n                \"transformer\"\n            ],\n            \"transformers\": [\n                \"transformer\",\n                \"attention\",\n                \"bert\",\n                \"gpt\",\n                \"llm\"\n            ],\n            \"prompt-engineering\": [\n                \"prompt\",\n                \"prompting\",\n                \"few-shot\",\n                \"zero-shot\",\n                \"chain of thought\"\n            ],\n            \"computer-vision\": [\n                \"visi\\xf3n\",\n                \"computer vision\",\n                \"imagen\",\n                \"opencv\",\n                \"cnn\",\n                \"clasificaci\\xf3n\"\n            ],\n            \"nlp\": [\n                \"nlp\",\n                \"procesamiento de lenguaje\",\n                \"texto\",\n                \"tokenizaci\\xf3n\",\n                \"embeddings\"\n            ]\n        };\n        // Find matching topic\n        for (const [topic, patterns] of Object.entries(topicPatterns)){\n            if (patterns.some((pattern)=>input.includes(pattern))) {\n                return topic;\n            }\n        }\n        return null;\n    }\n    generateContextualSuggestions(userInput, response, emotion, currentTopic) {\n        const suggestions = [];\n        // Base suggestions based on emotion\n        switch(emotion){\n            case \"confused\":\n                suggestions.push(\"\\xbfPuedes explicar eso m\\xe1s simple?\");\n                suggestions.push(\"Dame un ejemplo pr\\xe1ctico\");\n                suggestions.push(\"\\xbfQu\\xe9 conceptos necesito saber primero?\");\n                break;\n            case \"frustrated\":\n                suggestions.push(\"Empecemos con lo b\\xe1sico\");\n                suggestions.push(\"D\\xe9jame intentar un enfoque diferente\");\n                suggestions.push(\"\\xbfQu\\xe9 parte espec\\xedfica es la m\\xe1s dif\\xedcil?\");\n                break;\n            case \"engaged\":\n                suggestions.push(\"\\xbfQu\\xe9 m\\xe1s puedo aprender sobre esto?\");\n                suggestions.push(\"Dame un ejemplo m\\xe1s avanzado\");\n                suggestions.push(\"\\xbfC\\xf3mo se aplica esto en la pr\\xe1ctica?\");\n                break;\n            default:\n                suggestions.push(\"\\xbfPuedes dar m\\xe1s detalles?\");\n                suggestions.push(\"Mu\\xe9strame un ejemplo\");\n                suggestions.push(\"\\xbfCu\\xe1l es el siguiente paso?\");\n        }\n        // Topic-specific suggestions\n        if (currentTopic) {\n            if (currentTopic.includes(\"machine learning\")) {\n                suggestions.push(\"\\xbfC\\xf3mo entreno un modelo?\");\n                suggestions.push(\"\\xbfQu\\xe9 algoritmos debo usar?\");\n            } else if (currentTopic.includes(\"neural network\")) {\n                suggestions.push(\"\\xbfC\\xf3mo funciona backpropagation?\");\n                suggestions.push(\"\\xbfQu\\xe9 es una funci\\xf3n de activaci\\xf3n?\");\n            } else if (currentTopic.includes(\"prompt engineering\")) {\n                suggestions.push(\"Dame ejemplos de prompts efectivos\");\n                suggestions.push(\"\\xbfC\\xf3mo mejoro mis prompts?\");\n            }\n        }\n        return suggestions.slice(0, 3); // Return max 3 suggestions\n    }\n    getFallbackResponse(userInput, emotionalState) {\n        const fallbackMessages = {\n            frustrated: \"Entiendo que esto puede ser frustrante. Vamos paso a paso - \\xbfqu\\xe9 parte espec\\xedfica te est\\xe1 costando m\\xe1s?\",\n            confused: \"No hay problema, la IA puede ser compleja. \\xbfPodr\\xedas decirme qu\\xe9 concepto te gustar\\xeda que explique m\\xe1s claramente?\",\n            engaged: \"\\xa1Me encanta tu entusiasmo! Aunque tuve un problema t\\xe9cnico, sigamos aprendiendo - \\xbfqu\\xe9 tema te interesa m\\xe1s?\",\n            default: \"Disculpa, tuve un problema procesando eso. \\xbfPodr\\xedas reformular tu pregunta de otra manera?\"\n        };\n        const message = fallbackMessages[emotionalState] || fallbackMessages.default;\n        return {\n            text: message,\n            video: null,\n            suggestions: [\n                \"\\xbfQu\\xe9 es machine learning?\",\n                \"Explica las redes neuronales\",\n                \"Dame un ejemplo pr\\xe1ctico\"\n            ],\n            metadata: {\n                emotion: emotionalState || \"neutral\",\n                confidence: 0.3,\n                nextSteps: [\n                    \"Reformula tu pregunta\",\n                    \"Intenta con un tema espec\\xedfico\"\n                ]\n            }\n        };\n    }\n    cleanJsonResponse(jsonString) {\n        // Remove markdown code blocks\n        if (jsonString.startsWith(\"```json\")) {\n            jsonString = jsonString.substring(7);\n        }\n        if (jsonString.startsWith(\"```\")) {\n            jsonString = jsonString.substring(3);\n        }\n        if (jsonString.endsWith(\"```\")) {\n            jsonString = jsonString.substring(0, jsonString.length - 3);\n        }\n        jsonString = jsonString.trim();\n        // Find JSON array boundaries\n        const startIndex = jsonString.indexOf(\"[\");\n        const endIndex = jsonString.lastIndexOf(\"]\");\n        if (startIndex === -1 || endIndex === -1) {\n            throw new Error(\"No JSON array found in response\");\n        }\n        return jsonString.substring(startIndex, endIndex + 1);\n    }\n    parseVideoResponse(rawText, context) {\n        const videoMarker = \"@@VIDEO_INFO@@\";\n        let video = null;\n        let text = rawText;\n        if (rawText.includes(videoMarker)) {\n            const parts = rawText.split(videoMarker);\n            text = parts[0].trim();\n            try {\n                const videoData = JSON.parse(parts[1]);\n                // Try to get better video from our service if we have topic context\n                const detectedTopic = context?.detectedTopic;\n                if (detectedTopic) {\n                    const betterVideo = _video_service__WEBPACK_IMPORTED_MODULE_1__.videoService.findBestVideoForTopic(detectedTopic, context?.userProfile?.learningLevel || \"beginner\", \"en\");\n                    if (betterVideo) {\n                        video = {\n                            videoId: betterVideo.videoId,\n                            title: betterVideo.title,\n                            thumbnailUrl: betterVideo.thumbnailUrl,\n                            duration: betterVideo.duration,\n                            description: betterVideo.description || `Video educativo sobre ${detectedTopic}`\n                        };\n                    }\n                }\n                // Fallback to Gemini's recommendation if no better video found\n                if (!video) {\n                    video = {\n                        videoId: videoData.videoId,\n                        title: videoData.title,\n                        thumbnailUrl: `https://i.ytimg.com/vi/${videoData.videoId}/hqdefault.jpg`,\n                        description: `Video recomendado sobre ${context?.currentTopic || \"el tema\"}`\n                    };\n                }\n            } catch (e) {\n                console.error(\"Failed to parse video JSON:\", e);\n                // Try to find a relevant video based on context anyway\n                const detectedTopic = context?.detectedTopic || context?.currentTopic;\n                if (detectedTopic) {\n                    const fallbackVideo = _video_service__WEBPACK_IMPORTED_MODULE_1__.videoService.findBestVideoForTopic(detectedTopic);\n                    if (fallbackVideo) {\n                        video = {\n                            videoId: fallbackVideo.videoId,\n                            title: fallbackVideo.title,\n                            thumbnailUrl: fallbackVideo.thumbnailUrl,\n                            duration: fallbackVideo.duration,\n                            description: fallbackVideo.description\n                        };\n                    }\n                }\n            }\n        } else {\n            // No video marker found, but check if we should recommend one based on topic\n            const detectedTopic = context?.detectedTopic;\n            if (detectedTopic && (context?.emotionalState === \"confused\" || context?.emotionalState === \"frustrated\" || text.toLowerCase().includes(\"no entiendo\") || text.toLowerCase().includes(\"visual\"))) {\n                const recommendedVideo = _video_service__WEBPACK_IMPORTED_MODULE_1__.videoService.findBestVideoForTopic(detectedTopic);\n                if (recommendedVideo) {\n                    video = {\n                        videoId: recommendedVideo.videoId,\n                        title: recommendedVideo.title,\n                        thumbnailUrl: recommendedVideo.thumbnailUrl,\n                        duration: recommendedVideo.duration,\n                        description: recommendedVideo.description\n                    };\n                    // Add a note about the video recommendation\n                    text += `\\n\\nTe recomiendo este video que puede ayudarte a entender mejor el concepto:`;\n                }\n            }\n        }\n        // Clean up the text response for better audio synthesis\n        const audioFriendlyText = this.prepareTextForAudio(text);\n        return {\n            text: audioFriendlyText,\n            video,\n            metadata: {\n                emotion: context?.emotionalState || \"neutral\",\n                confidence: context?.confidence || (video ? 0.8 : 0.6),\n                nextSteps: video ? [\n                    \"Ve el video recomendado\",\n                    \"Haz preguntas de seguimiento\",\n                    \"Prueba con un ejercicio\"\n                ] : [\n                    \"Contin\\xfaa la discusi\\xf3n\",\n                    \"Pide m\\xe1s ejemplos\",\n                    \"Solicita ejercicios pr\\xe1cticos\"\n                ],\n                userName: context?.userName\n            }\n        };\n    }\n    prepareTextForAudio(text) {\n        return text// Clean up for better audio synthesis\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold formatting\n        .replace(/\\*(.*?)\\*/g, \"$1\") // Remove italic formatting\n        .replace(/`(.*?)`/g, \"$1\") // Remove code formatting\n        .replace(/#{1,6}\\s*(.*)/g, \"$1\") // Remove headers\n        .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\") // Remove links\n        // Keep the original text intact but add pauses for readability\n        .replace(/\\. /g, \". \").replace(/\\? /g, \"? \").replace(/! /g, \"! \").trim();\n    }\n    getFallbackVideos(roadmap) {\n        const fallbacks = [\n            {\n                videoId: \"ukzFI9rgwfU\",\n                title: \"Machine Learning Explained\"\n            },\n            {\n                videoId: \"aircAruvnKk\",\n                title: \"Neural Networks Introduction\"\n            },\n            {\n                videoId: \"IHZwWFHWa-w\",\n                title: \"AI vs Machine Learning\"\n            },\n            {\n                videoId: \"R9OHn5ZF4Uo\",\n                title: \"Deep Learning Basics\"\n            },\n            {\n                videoId: \"TJldO5M5tbo\",\n                title: \"AI Ethics Overview\"\n            }\n        ];\n        return fallbacks.slice(0, Math.min(roadmap.length, 5)).map((video)=>({\n                ...video,\n                thumbnailUrl: `https://i.ytimg.com/vi/${video.videoId}/hqdefault.jpg`\n            }));\n    }\n    getFallbackRoadmap(themeName) {\n        return [\n            {\n                title: \"Introducci\\xf3n a la IA\",\n                description: \"Aprende los conceptos b\\xe1sicos y terminolog\\xeda de la inteligencia artificial.\"\n            },\n            {\n                title: \"Tipos de IA\",\n                description: \"Explora las diferentes categor\\xedas como IA estrecha y IA general.\"\n            },\n            {\n                title: \"Machine Learning B\\xe1sico\",\n                description: \"Entiende c\\xf3mo las m\\xe1quinas aprenden de los datos.\"\n            },\n            {\n                title: \"Redes Neuronales\",\n                description: \"Un vistazo a la estructura del 'cerebro' de la IA.\"\n            },\n            {\n                title: \"\\xc9tica en IA\",\n                description: \"Discute las importantes implicaciones sociales de la IA.\"\n            }\n        ];\n    }\n}\n// Create singleton instance\nconst enhancedGeminiService = new EnhancedGeminiService();\n// Export for compatibility with existing code\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/enhanced-gemini.ts\n");

/***/ }),

/***/ "(rsc)/./lib/gemini.ts":
/*!***********************!*\
  !*** ./lib/gemini.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geminiService: () => (/* binding */ geminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/**\n * Enhanced Gemini Service for ProfAI\n * Provides AI tutoring capabilities with Google's Gemini API\n */ \nclass GeminiService {\n    constructor(){\n        const apiKey = process.env.GEMINI_API_KEY;\n        if (!apiKey) {\n            console.warn(\"⚠️ GEMINI_API_KEY not found - using mock responses\");\n            this.genAI = null;\n            this.model = null;\n            this.isInitialized = false;\n            return;\n        }\n        try {\n            this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n            this.model = this.genAI.getGenerativeModel({\n                model: process.env.GEMINI_MODEL || \"gemini-2.0-flash-exp\"\n            });\n            this.isInitialized = true;\n            console.log(\"✅ Gemini service initialized\");\n        } catch (error) {\n            console.error(\"❌ Gemini initialization failed:\", error);\n            this.genAI = null;\n            this.model = null;\n            this.isInitialized = false;\n        }\n    }\n    async generateContent(prompt, systemInstruction) {\n        if (!this.isInitialized || !this.model) {\n            return `Mock response to: \"${prompt}\"`;\n        }\n        try {\n            const fullPrompt = systemInstruction ? `${systemInstruction}\\n\\nUser: ${prompt}` : prompt;\n            const result = await this.model.generateContent(fullPrompt);\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"❌ Gemini API error:\", error);\n            return `Error generating response: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n        }\n    }\n    async generateChatResponse(userMessage, context) {\n        const systemInstruction = `You are ProfAI, an expert AI/ML professor. Provide educational, engaging responses adapted to the user's needs.`;\n        try {\n            const response = await this.generateContent(userMessage, systemInstruction);\n            return {\n                message: response,\n                followUpQuestions: [\n                    \"Would you like to explore this topic further?\",\n                    \"Do you have questions about any specific part?\",\n                    \"What would you like to learn next?\"\n                ],\n                relatedTopics: [\n                    \"Machine Learning\",\n                    \"Neural Networks\",\n                    \"Deep Learning\",\n                    \"AI Ethics\"\n                ],\n                needsClarification: false,\n                emotionalTone: \"neutral\"\n            };\n        } catch (error) {\n            return {\n                message: \"I'm having trouble connecting right now, but I'm here to help with AI/ML education. What topic interests you?\",\n                followUpQuestions: [\n                    \"What area of AI interests you most?\"\n                ],\n                emotionalTone: \"supportive\"\n            };\n        }\n    }\n    async generateLesson(topic, difficulty = \"intermediate\", learningStyle = \"hybrid\") {\n        const prompt = `Generate a comprehensive lesson on \"${topic}\" at ${difficulty} level with ${learningStyle} approach.`;\n        try {\n            const response = await this.generateContent(prompt);\n            return {\n                title: `Understanding ${topic}`,\n                objectives: [\n                    `Learn fundamentals of ${topic}`,\n                    `Understand practical applications`,\n                    `Apply concepts in real scenarios`\n                ],\n                content: response,\n                codeExample: learningStyle !== \"theory\" ? `# ${topic} example\\nprint(\"Learning ${topic}\")` : undefined,\n                quiz: {\n                    question: `What is the key concept in ${topic}?`,\n                    options: [\n                        \"Option A\",\n                        \"Option B\",\n                        \"Option C\",\n                        \"Option D\"\n                    ],\n                    correctAnswer: 0,\n                    explanation: \"This demonstrates understanding of core concepts.\"\n                },\n                nextSteps: [\n                    \"Practice with exercises\",\n                    \"Explore advanced topics\",\n                    \"Try real-world applications\"\n                ]\n            };\n        } catch (error) {\n            return {\n                title: `Introduction to ${topic}`,\n                objectives: [\n                    `Learn about ${topic}`\n                ],\n                content: `This lesson covers ${topic}. ${error}`,\n                quiz: {\n                    question: `What is ${topic}?`,\n                    options: [\n                        \"A\",\n                        \"B\",\n                        \"C\",\n                        \"D\"\n                    ],\n                    correctAnswer: 0,\n                    explanation: \"Basic understanding check.\"\n                },\n                nextSteps: [\n                    \"Continue learning\"\n                ]\n            };\n        }\n    }\n    async generateExercise(topic, difficulty = \"intermediate\") {\n        return {\n            title: `${topic} Exercise`,\n            description: `Practice exercise for ${topic} at ${difficulty} level`,\n            instructions: [\n                \"Read the problem carefully\",\n                \"Plan your approach\",\n                \"Implement your solution\",\n                \"Test your results\"\n            ],\n            starterCode: `# ${topic} exercise\\n# Your code here\\npass`,\n            expectedOutput: \"Successful completion of exercise requirements\",\n            evaluationCriteria: [\n                \"Correctness of solution\",\n                \"Code quality\",\n                \"Understanding demonstrated\"\n            ],\n            hints: [\n                \"Break the problem into steps\",\n                \"Test with simple examples\",\n                \"Ask for help if needed\"\n            ]\n        };\n    }\n    async evaluateSubmission(exercise, submission) {\n        return {\n            score: 75,\n            feedback: {\n                strengths: [\n                    \"Good understanding of concepts\"\n                ],\n                improvements: [\n                    \"Could add more detail\"\n                ],\n                specificComments: [\n                    \"Shows solid grasp of fundamentals\"\n                ]\n            },\n            suggestions: [\n                \"Practice more exercises\",\n                \"Try advanced challenges\",\n                \"Review key concepts\"\n            ],\n            nextLevel: false\n        };\n    }\n}\n// Create singleton instance\nconst geminiService = new GeminiService();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/gemini.ts\n");

/***/ }),

/***/ "(rsc)/./lib/image-fallbacks.ts":
/*!********************************!*\
  !*** ./lib/image-fallbacks.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FALLBACK_IMAGES: () => (/* binding */ FALLBACK_IMAGES),\n/* harmony export */   STABLE_UNSPLASH_IMAGES: () => (/* binding */ STABLE_UNSPLASH_IMAGES),\n/* harmony export */   createPlaceholderSVG: () => (/* binding */ createPlaceholderSVG),\n/* harmony export */   getImageWithFallback: () => (/* binding */ getImageWithFallback),\n/* harmony export */   handleImageError: () => (/* binding */ handleImageError)\n/* harmony export */ });\n// Image fallback utility for handling failed image loads\n// This provides stable placeholder images when Unsplash images fail\nconst FALLBACK_IMAGES = {\n    \"machine-learning\": \"/images/courses/ml-fallback.svg\",\n    \"prompt-engineering\": \"/images/courses/prompt-fallback.svg\",\n    \"deep-learning\": \"/images/courses/dl-fallback.svg\",\n    \"nlp\": \"/images/courses/nlp-fallback.svg\",\n    \"ai-ethics\": \"/images/courses/ethics-fallback.svg\",\n    \"default\": \"/images/courses/default-fallback.svg\"\n};\nconst STABLE_UNSPLASH_IMAGES = {\n    \"machine-learning\": \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=400&h=200&fit=crop&crop=center&auto=format&q=75\",\n    \"prompt-engineering\": \"https://images.unsplash.com/photo-1563207153-f403bf289096?w=400&h=200&fit=crop&crop=center&auto=format&q=75\",\n    \"deep-learning\": \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=200&fit=crop&crop=center&auto=format&q=75\",\n    \"nlp\": \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&h=200&fit=crop&crop=center&auto=format&q=75\",\n    \"ai-ethics\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=200&fit=crop&crop=center&auto=format&q=75\",\n    \"default\": \"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?w=400&h=200&fit=crop&crop=center&auto=format&q=75\"\n};\n// Create SVG placeholder\nfunction createPlaceholderSVG(text, width = 400, height = 200) {\n    return `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`\n    <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" style=\"stop-color:#667eea;stop-opacity:1\" />\n          <stop offset=\"100%\" style=\"stop-color:#764ba2;stop-opacity:1\" />\n        </linearGradient>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#grad1)\"/>\n      <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.3em\" \n            font-family=\"system-ui, -apple-system, sans-serif\" \n            font-size=\"16\" font-weight=\"600\" fill=\"white\">\n        ${text}\n      </text>\n    </svg>\n  `)}`;\n}\n// Get image URL with fallback handling\nfunction getImageWithFallback(courseId, categoryHint) {\n    const categoryMap = {\n        \"course-ml-fundamentals\": \"machine-learning\",\n        \"course-prompt-engineering\": \"prompt-engineering\",\n        \"course-deep-learning\": \"deep-learning\",\n        \"course-nlp-basics\": \"nlp\",\n        \"course-ai-ethics\": \"ai-ethics\"\n    };\n    const category = categoryMap[courseId] || categoryHint || \"default\";\n    return STABLE_UNSPLASH_IMAGES[category] || STABLE_UNSPLASH_IMAGES.default;\n}\n// Image error handler\nfunction handleImageError(event, fallbackText) {\n    const img = event.currentTarget;\n    const placeholder = createPlaceholderSVG(fallbackText);\n    img.src = placeholder;\n    img.onerror = null; // Prevent infinite loop\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvaW1hZ2UtZmFsbGJhY2tzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEseURBQXlEO0FBQ3pELG9FQUFvRTtBQUU3RCxNQUFNQSxrQkFBa0I7SUFDN0Isb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIsT0FBTztJQUNQLGFBQWE7SUFDYixXQUFXO0FBQ2IsRUFBRTtBQUVLLE1BQU1DLHlCQUF5QjtJQUNwQyxvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixPQUFPO0lBQ1AsYUFBYTtJQUNiLFdBQVc7QUFDYixFQUFFO0FBRUYseUJBQXlCO0FBQ2xCLFNBQVNDLHFCQUFxQkMsSUFBWSxFQUFFQyxRQUFRLEdBQUcsRUFBRUMsU0FBUyxHQUFHO0lBQzFFLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRUMsbUJBQW1CLENBQUM7Z0JBQ2pELEVBQUVGLE1BQU0sVUFBVSxFQUFFQyxPQUFPOzs7Ozs7Ozs7OztRQVduQyxFQUFFRixLQUFLOzs7RUFHYixDQUFDLEVBQUUsQ0FBQztBQUNOO0FBRUEsdUNBQXVDO0FBQ2hDLFNBQVNJLHFCQUFxQkMsUUFBZ0IsRUFBRUMsWUFBcUI7SUFDMUUsTUFBTUMsY0FBc0U7UUFDMUUsMEJBQTBCO1FBQzFCLDZCQUE2QjtRQUM3Qix3QkFBd0I7UUFDeEIscUJBQXFCO1FBQ3JCLG9CQUFvQjtJQUN0QjtJQUVBLE1BQU1DLFdBQVdELFdBQVcsQ0FBQ0YsU0FBUyxJQUFJQyxnQkFBZ0I7SUFDMUQsT0FBT1Isc0JBQXNCLENBQUNVLFNBQVMsSUFBSVYsdUJBQXVCVyxPQUFPO0FBQzNFO0FBRUEsc0JBQXNCO0FBQ2YsU0FBU0MsaUJBQWlCQyxLQUE2QyxFQUFFQyxZQUFvQjtJQUNsRyxNQUFNQyxNQUFNRixNQUFNRyxhQUFhO0lBQy9CLE1BQU1DLGNBQWNoQixxQkFBcUJhO0lBQ3pDQyxJQUFJRyxHQUFHLEdBQUdEO0lBQ1ZGLElBQUlJLE9BQU8sR0FBRyxNQUFNLHdCQUF3QjtBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL2xpYi9pbWFnZS1mYWxsYmFja3MudHM/YmMzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbWFnZSBmYWxsYmFjayB1dGlsaXR5IGZvciBoYW5kbGluZyBmYWlsZWQgaW1hZ2UgbG9hZHNcbi8vIFRoaXMgcHJvdmlkZXMgc3RhYmxlIHBsYWNlaG9sZGVyIGltYWdlcyB3aGVuIFVuc3BsYXNoIGltYWdlcyBmYWlsXG5cbmV4cG9ydCBjb25zdCBGQUxMQkFDS19JTUFHRVMgPSB7XG4gICdtYWNoaW5lLWxlYXJuaW5nJzogJy9pbWFnZXMvY291cnNlcy9tbC1mYWxsYmFjay5zdmcnLFxuICAncHJvbXB0LWVuZ2luZWVyaW5nJzogJy9pbWFnZXMvY291cnNlcy9wcm9tcHQtZmFsbGJhY2suc3ZnJyxcbiAgJ2RlZXAtbGVhcm5pbmcnOiAnL2ltYWdlcy9jb3Vyc2VzL2RsLWZhbGxiYWNrLnN2ZycsXG4gICdubHAnOiAnL2ltYWdlcy9jb3Vyc2VzL25scC1mYWxsYmFjay5zdmcnLFxuICAnYWktZXRoaWNzJzogJy9pbWFnZXMvY291cnNlcy9ldGhpY3MtZmFsbGJhY2suc3ZnJyxcbiAgJ2RlZmF1bHQnOiAnL2ltYWdlcy9jb3Vyc2VzL2RlZmF1bHQtZmFsbGJhY2suc3ZnJ1xufTtcblxuZXhwb3J0IGNvbnN0IFNUQUJMRV9VTlNQTEFTSF9JTUFHRVMgPSB7XG4gICdtYWNoaW5lLWxlYXJuaW5nJzogJ2h0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDg1ODI3NDA0NzAzLTg5YjU1ZmNjNTk1ZT93PTQwMCZoPTIwMCZmaXQ9Y3JvcCZjcm9wPWNlbnRlciZhdXRvPWZvcm1hdCZxPTc1JyxcbiAgJ3Byb21wdC1lbmdpbmVlcmluZyc6ICdodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTU2MzIwNzE1My1mNDAzYmYyODkwOTY/dz00MDAmaD0yMDAmZml0PWNyb3AmY3JvcD1jZW50ZXImYXV0bz1mb3JtYXQmcT03NScsXG4gICdkZWVwLWxlYXJuaW5nJzogJ2h0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTE4NzA5MjY4ODA1LTRlOTA0MmFmMjE3Nj93PTQwMCZoPTIwMCZmaXQ9Y3JvcCZjcm9wPWNlbnRlciZhdXRvPWZvcm1hdCZxPTc1JyxcbiAgJ25scCc6ICdodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUxNjMyMTMxODQyMy1mMDZmODVlNTA0YjM/dz00MDAmaD0yMDAmZml0PWNyb3AmY3JvcD1jZW50ZXImYXV0bz1mb3JtYXQmcT03NScsXG4gICdhaS1ldGhpY3MnOiAnaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE1MDcwMDMyMTExNjktMGExZGQ3MjI4ZjJkP3c9NDAwJmg9MjAwJmZpdD1jcm9wJmNyb3A9Y2VudGVyJmF1dG89Zm9ybWF0JnE9NzUnLFxuICAnZGVmYXVsdCc6ICdodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUyNjM3NDk2NTMyOC03ZjYxZDRkYzE4YzU/dz00MDAmaD0yMDAmZml0PWNyb3AmY3JvcD1jZW50ZXImYXV0bz1mb3JtYXQmcT03NSdcbn07XG5cbi8vIENyZWF0ZSBTVkcgcGxhY2Vob2xkZXJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQbGFjZWhvbGRlclNWRyh0ZXh0OiBzdHJpbmcsIHdpZHRoID0gNDAwLCBoZWlnaHQgPSAyMDApOiBzdHJpbmcge1xuICByZXR1cm4gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PVVURi04LCR7ZW5jb2RlVVJJQ29tcG9uZW50KGBcbiAgICA8c3ZnIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke2hlaWdodH1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICA8ZGVmcz5cbiAgICAgICAgPGxpbmVhckdyYWRpZW50IGlkPVwiZ3JhZDFcIiB4MT1cIjAlXCIgeTE9XCIwJVwiIHgyPVwiMTAwJVwiIHkyPVwiMTAwJVwiPlxuICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiM2NjdlZWE7c3RvcC1vcGFjaXR5OjFcIiAvPlxuICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdHlsZT1cInN0b3AtY29sb3I6Izc2NGJhMjtzdG9wLW9wYWNpdHk6MVwiIC8+XG4gICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgICA8L2RlZnM+XG4gICAgICA8cmVjdCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cInVybCgjZ3JhZDEpXCIvPlxuICAgICAgPHRleHQgeD1cIjUwJVwiIHk9XCI1MCVcIiB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIGR5PVwiMC4zZW1cIiBcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5PVwic3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBzYW5zLXNlcmlmXCIgXG4gICAgICAgICAgICBmb250LXNpemU9XCIxNlwiIGZvbnQtd2VpZ2h0PVwiNjAwXCIgZmlsbD1cIndoaXRlXCI+XG4gICAgICAgICR7dGV4dH1cbiAgICAgIDwvdGV4dD5cbiAgICA8L3N2Zz5cbiAgYCl9YDtcbn1cblxuLy8gR2V0IGltYWdlIFVSTCB3aXRoIGZhbGxiYWNrIGhhbmRsaW5nXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VXaXRoRmFsbGJhY2soY291cnNlSWQ6IHN0cmluZywgY2F0ZWdvcnlIaW50Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgY2F0ZWdvcnlNYXA6IHsgW2tleTogc3RyaW5nXToga2V5b2YgdHlwZW9mIFNUQUJMRV9VTlNQTEFTSF9JTUFHRVMgfSA9IHtcbiAgICAnY291cnNlLW1sLWZ1bmRhbWVudGFscyc6ICdtYWNoaW5lLWxlYXJuaW5nJyxcbiAgICAnY291cnNlLXByb21wdC1lbmdpbmVlcmluZyc6ICdwcm9tcHQtZW5naW5lZXJpbmcnLCBcbiAgICAnY291cnNlLWRlZXAtbGVhcm5pbmcnOiAnZGVlcC1sZWFybmluZycsXG4gICAgJ2NvdXJzZS1ubHAtYmFzaWNzJzogJ25scCcsXG4gICAgJ2NvdXJzZS1haS1ldGhpY3MnOiAnYWktZXRoaWNzJ1xuICB9O1xuXG4gIGNvbnN0IGNhdGVnb3J5ID0gY2F0ZWdvcnlNYXBbY291cnNlSWRdIHx8IGNhdGVnb3J5SGludCB8fCAnZGVmYXVsdCc7XG4gIHJldHVybiBTVEFCTEVfVU5TUExBU0hfSU1BR0VTW2NhdGVnb3J5XSB8fCBTVEFCTEVfVU5TUExBU0hfSU1BR0VTLmRlZmF1bHQ7XG59XG5cbi8vIEltYWdlIGVycm9yIGhhbmRsZXJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVJbWFnZUVycm9yKGV2ZW50OiBSZWFjdC5TeW50aGV0aWNFdmVudDxIVE1MSW1hZ2VFbGVtZW50PiwgZmFsbGJhY2tUZXh0OiBzdHJpbmcpIHtcbiAgY29uc3QgaW1nID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgY29uc3QgcGxhY2Vob2xkZXIgPSBjcmVhdGVQbGFjZWhvbGRlclNWRyhmYWxsYmFja1RleHQpO1xuICBpbWcuc3JjID0gcGxhY2Vob2xkZXI7XG4gIGltZy5vbmVycm9yID0gbnVsbDsgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wXG59XG4iXSwibmFtZXMiOlsiRkFMTEJBQ0tfSU1BR0VTIiwiU1RBQkxFX1VOU1BMQVNIX0lNQUdFUyIsImNyZWF0ZVBsYWNlaG9sZGVyU1ZHIiwidGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0SW1hZ2VXaXRoRmFsbGJhY2siLCJjb3Vyc2VJZCIsImNhdGVnb3J5SGludCIsImNhdGVnb3J5TWFwIiwiY2F0ZWdvcnkiLCJkZWZhdWx0IiwiaGFuZGxlSW1hZ2VFcnJvciIsImV2ZW50IiwiZmFsbGJhY2tUZXh0IiwiaW1nIiwiY3VycmVudFRhcmdldCIsInBsYWNlaG9sZGVyIiwic3JjIiwib25lcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/image-fallbacks.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data.ts":
/*!**************************!*\
  !*** ./lib/mock-data.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDemoUser: () => (/* binding */ getDemoUser),\n/* harmony export */   isDemoUser: () => (/* binding */ isDemoUser),\n/* harmony export */   mockData: () => (/* binding */ mockData)\n/* harmony export */ });\n/* harmony import */ var _image_fallbacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image-fallbacks */ \"(rsc)/./lib/image-fallbacks.ts\");\n// Mock data helper for ProfAI demo mode\n// This provides fallback data when database is unavailable\n\nconst mockData = {\n    // Demo users\n    demoUsers: {\n        \"demo_john_doe\": {\n            id: \"demo_john_doe\",\n            email: \"john@doe.com\",\n            name: \"John Doe\",\n            firstName: \"John\",\n            lastName: \"Doe\",\n            learningStyle: {\n                visual: 0.8,\n                auditory: 0.6,\n                kinesthetic: 0.7\n            },\n            skillLevel: {\n                theory: \"intermediate\",\n                tooling: \"beginner\",\n                prompting: \"intermediate\"\n            },\n            emotionBaseline: {\n                confusion_threshold: 0.7,\n                frustration_threshold: 0.6,\n                engagement_baseline: 0.5\n            },\n            preferences: {\n                preferred_format: \"hybrid\",\n                language: \"es\",\n                pace: \"normal\",\n                difficulty_preference: \"adaptive\"\n            },\n            totalLessonsCompleted: 12,\n            currentStreak: 5,\n            lastActiveAt: new Date().toISOString()\n        },\n        \"demo_profai\": {\n            id: \"demo_profai\",\n            email: \"demo@profai.com\",\n            name: \"Demo User\",\n            firstName: \"Demo\",\n            lastName: \"User\",\n            learningStyle: {\n                visual: 0.7,\n                auditory: 0.5,\n                kinesthetic: 0.6\n            },\n            skillLevel: {\n                theory: \"beginner\",\n                tooling: \"beginner\",\n                prompting: \"beginner\"\n            },\n            emotionBaseline: {\n                confusion_threshold: 0.7,\n                frustration_threshold: 0.6,\n                engagement_baseline: 0.5\n            },\n            preferences: {\n                preferred_format: \"hybrid\",\n                language: \"es\",\n                pace: \"normal\",\n                difficulty_preference: \"adaptive\"\n            },\n            totalLessonsCompleted: 3,\n            currentStreak: 1,\n            lastActiveAt: new Date().toISOString()\n        }\n    },\n    // Mock courses\n    courses: [\n        {\n            id: \"course-ml-fundamentals\",\n            title: \"Machine Learning Fundamentals\",\n            description: \"Aprende los conceptos b\\xe1sicos de Machine Learning con ejemplos pr\\xe1cticos y teor\\xeda aplicada\",\n            category: \"theory\",\n            difficulty: 2,\n            imageUrl: (0,_image_fallbacks__WEBPACK_IMPORTED_MODULE_0__.getImageWithFallback)(\"course-ml-fundamentals\", \"machine-learning\"),\n            progress: 45,\n            totalLessons: 8,\n            completedLessons: 3,\n            isActive: true,\n            sortOrder: 1\n        },\n        {\n            id: \"course-prompt-engineering\",\n            title: \"Prompt Engineering Avanzado\",\n            description: \"Domina el arte de crear prompts efectivos para maximizar el potencial de las IAs generativas\",\n            category: \"tooling\",\n            difficulty: 3,\n            imageUrl: (0,_image_fallbacks__WEBPACK_IMPORTED_MODULE_0__.getImageWithFallback)(\"course-prompt-engineering\", \"prompt-engineering\"),\n            progress: 20,\n            totalLessons: 6,\n            completedLessons: 1,\n            isActive: true,\n            sortOrder: 2\n        },\n        {\n            id: \"course-deep-learning\",\n            title: \"Deep Learning con PyTorch\",\n            description: \"Construye redes neuronales profundas y entiende los algoritmos que potencian la IA moderna\",\n            category: \"hybrid\",\n            difficulty: 4,\n            imageUrl: (0,_image_fallbacks__WEBPACK_IMPORTED_MODULE_0__.getImageWithFallback)(\"course-deep-learning\", \"deep-learning\"),\n            progress: 0,\n            totalLessons: 12,\n            completedLessons: 0,\n            isActive: true,\n            sortOrder: 3\n        },\n        {\n            id: \"course-nlp-basics\",\n            title: \"Procesamiento de Lenguaje Natural\",\n            description: \"Explora c\\xf3mo las m\\xe1quinas entienden y generan lenguaje humano\",\n            category: \"theory\",\n            difficulty: 3,\n            imageUrl: (0,_image_fallbacks__WEBPACK_IMPORTED_MODULE_0__.getImageWithFallback)(\"course-nlp-basics\", \"nlp\"),\n            progress: 75,\n            totalLessons: 5,\n            completedLessons: 4,\n            isActive: true,\n            sortOrder: 4\n        },\n        {\n            id: \"course-ai-ethics\",\n            title: \"\\xc9tica en Inteligencia Artificial\",\n            description: \"Comprende los aspectos \\xe9ticos y sociales del desarrollo de IA responsable\",\n            category: \"theory\",\n            difficulty: 2,\n            imageUrl: (0,_image_fallbacks__WEBPACK_IMPORTED_MODULE_0__.getImageWithFallback)(\"course-ai-ethics\", \"ai-ethics\"),\n            progress: 100,\n            totalLessons: 4,\n            completedLessons: 4,\n            isActive: true,\n            sortOrder: 5\n        }\n    ],\n    // Mock lessons for each course\n    lessons: {\n        \"course-ml-fundamentals\": [\n            {\n                id: \"lesson-ml-intro\",\n                title: \"\\xbfQu\\xe9 es Machine Learning?\",\n                description: \"Introducci\\xf3n conceptual al aprendizaje autom\\xe1tico con ejemplos pr\\xe1cticos\",\n                estimatedDuration: 600,\n                difficultyLevel: 1,\n                hasVideoContent: true,\n                hasCodeExamples: false,\n                hasQuiz: true,\n                isCompleted: true,\n                progress: 100\n            },\n            {\n                id: \"lesson-ml-types\",\n                title: \"Tipos de Aprendizaje Autom\\xe1tico\",\n                description: \"Supervisado, no supervisado y por refuerzo: cu\\xe1ndo usar cada uno\",\n                estimatedDuration: 900,\n                difficultyLevel: 2,\n                hasVideoContent: true,\n                hasCodeExamples: true,\n                hasQuiz: true,\n                isCompleted: true,\n                progress: 100\n            },\n            {\n                id: \"lesson-ml-algorithms\",\n                title: \"Algoritmos Fundamentales\",\n                description: \"Regresi\\xf3n lineal, \\xe1rboles de decisi\\xf3n y k-means explicados\",\n                estimatedDuration: 1200,\n                difficultyLevel: 2,\n                hasVideoContent: false,\n                hasCodeExamples: true,\n                hasQuiz: true,\n                isCompleted: true,\n                progress: 100\n            },\n            {\n                id: \"lesson-ml-evaluation\",\n                title: \"Evaluaci\\xf3n de Modelos\",\n                description: \"M\\xe9tricas y t\\xe9cnicas para medir el rendimiento de tus modelos\",\n                estimatedDuration: 800,\n                difficultyLevel: 3,\n                hasVideoContent: true,\n                hasCodeExamples: true,\n                hasQuiz: true,\n                isCompleted: false,\n                progress: 60\n            }\n        ],\n        \"course-prompt-engineering\": [\n            {\n                id: \"lesson-prompt-intro\",\n                title: \"Fundamentos de Prompt Engineering\",\n                description: \"Aprende los principios b\\xe1sicos para crear prompts efectivos\",\n                estimatedDuration: 600,\n                difficultyLevel: 1,\n                hasVideoContent: true,\n                hasCodeExamples: false,\n                hasQuiz: true,\n                isCompleted: true,\n                progress: 100\n            },\n            {\n                id: \"lesson-prompt-advanced\",\n                title: \"T\\xe9cnicas Avanzadas\",\n                description: \"Chain-of-thought, few-shot learning y m\\xe1s t\\xe9cnicas avanzadas\",\n                estimatedDuration: 900,\n                difficultyLevel: 3,\n                hasVideoContent: true,\n                hasCodeExamples: true,\n                hasQuiz: true,\n                isCompleted: false,\n                progress: 0\n            }\n        ]\n    },\n    // Mock exercises\n    exercises: [\n        {\n            id: \"exercise-regression-basic\",\n            title: \"Implementa Regresi\\xf3n Lineal Simple\",\n            description: \"Crea un modelo de regresi\\xf3n lineal desde cero usando Python\",\n            instructions: [\n                \"Importa las librer\\xedas necesarias (numpy, matplotlib)\",\n                \"Carga el dataset de precios de casas\",\n                \"Implementa la funci\\xf3n de costo\",\n                \"Usa gradiente descendente para optimizar\",\n                \"Visualiza los resultados\"\n            ],\n            starterCode: `import numpy as np\nimport matplotlib.pyplot as plt\n\n# TODO: Implementa aquí tu solución\ndef linear_regression(X, y, learning_rate=0.01, epochs=1000):\n    # Tu código aquí\n    pass\n\n# Datos de ejemplo\nX = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 4, 6, 8, 10])`,\n            expectedOutput: \"Un modelo entrenado que prediga correctamente los valores de y\",\n            evaluationCriteria: [\n                \"Implementaci\\xf3n correcta del algoritmo\",\n                \"Uso apropiado de numpy\",\n                \"C\\xf3digo limpio y bien comentado\",\n                \"Visualizaci\\xf3n de resultados\"\n            ],\n            hints: [\n                \"Recuerda normalizar los datos antes de entrenar\",\n                \"La funci\\xf3n de costo deber\\xeda decrecer en cada \\xe9poca\"\n            ],\n            difficulty: 2,\n            exerciseType: \"coding\"\n        }\n    ],\n    // Mock conversations\n    conversations: [\n        {\n            id: \"conv-demo-1\",\n            userId: \"demo_john_doe\",\n            title: \"Consulta sobre redes neuronales\",\n            context: {\n                emotional_state: \"engaged\",\n                adaptation_count: 1,\n                topic: \"neural networks\"\n            },\n            isActive: true,\n            createdAt: new Date(Date.now() - 86400000).toISOString(),\n            messages: [\n                {\n                    id: \"msg-1\",\n                    content: \"\\xbfPuedes explicarme c\\xf3mo funcionan las redes neuronales?\",\n                    role: \"user\",\n                    createdAt: new Date(Date.now() - 86400000).toISOString()\n                },\n                {\n                    id: \"msg-2\",\n                    content: \"Las redes neuronales son sistemas computacionales inspirados en el funcionamiento del cerebro humano...\",\n                    role: \"assistant\",\n                    createdAt: new Date(Date.now() - 86340000).toISOString()\n                }\n            ]\n        }\n    ],\n    // Mock user progress\n    userProgress: {\n        \"demo_john_doe\": {\n            totalLessonsCompleted: 12,\n            currentStreak: 5,\n            coursesInProgress: 3,\n            avgSessionTime: 18,\n            recentActivity: [\n                {\n                    id: \"activity-1\",\n                    type: \"lesson_completed\",\n                    title: \"Algoritmos Fundamentales\",\n                    courseName: \"Machine Learning Fundamentals\",\n                    timestamp: new Date(Date.now() - 3600000).toISOString(),\n                    score: 85\n                },\n                {\n                    id: \"activity-2\",\n                    type: \"exercise_submitted\",\n                    title: \"Implementa Regresi\\xf3n Lineal\",\n                    courseName: \"Machine Learning Fundamentals\",\n                    timestamp: new Date(Date.now() - 7200000).toISOString(),\n                    score: 92\n                }\n            ]\n        }\n    }\n};\n// Helper function to check if user is demo user\nfunction isDemoUser(userId) {\n    return !!(userId && (userId.startsWith(\"demo_\") || userId.startsWith(\"temp_\")));\n}\n// Helper function to get demo user data\nfunction getDemoUser(userId) {\n    return mockData.demoUsers[userId] || null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data.ts\n");

/***/ }),

/***/ "(rsc)/./lib/video-service.ts":
/*!******************************!*\
  !*** ./lib/video-service.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoService: () => (/* binding */ VideoService),\n/* harmony export */   videoService: () => (/* binding */ videoService)\n/* harmony export */ });\n/**\n * Enhanced Video Service for ProfAI\n * Manages YouTube video integration with educational content\n */ class VideoService {\n    constructor(youtubeApiKey){\n        this.youtubeApiKey = null;\n        // Educational AI/ML YouTube channels that typically allow embedding\n        this.trustedEducationalChannels = [\n            {\n                name: \"3Blue1Brown\",\n                channelId: \"UCYO_jab_esuFRV4b17AJtAw\",\n                category: \"mathematics\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"Two Minute Papers\",\n                channelId: \"UCbfYPyITQ-7l4upoX8nvctg\",\n                category: \"ai-research\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"Fireship\",\n                channelId: \"UCsBjURrPoezykLs9EqgamOA\",\n                category: \"programming\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"Computerphile\",\n                channelId: \"UC9-y-6csu5WGm29I7JiwpnA\",\n                category: \"computer-science\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"Crash Course Computer Science\",\n                channelId: \"UCsx5g1cECGBhEhBAa8kSJEQ\",\n                category: \"cs-education\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"StatQuest with Josh Starmer\",\n                channelId: \"UCtYLUTtgS3k1Fg4y5tAhLbw\",\n                category: \"statistics\",\n                quality: \"high\",\n                embedding: true\n            },\n            {\n                name: \"Sentdex\",\n                channelId: \"UCfzlCWGWYyIQ0aLC5w48gBQ\",\n                category: \"python-ml\",\n                quality: \"medium\",\n                embedding: true\n            },\n            {\n                name: \"Code Bullet\",\n                channelId: \"UC0e3QhIYukixgh5VVpKHH9Q\",\n                category: \"ai-programming\",\n                quality: \"medium\",\n                embedding: true\n            }\n        ];\n        // Curated educational videos by topic\n        this.curatedVideoDatabase = {\n            \"machine-learning\": [\n                {\n                    videoId: \"ukzFI9rgwfU\",\n                    title: \"Machine Learning Explained\",\n                    description: \"A comprehensive introduction to machine learning concepts\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/ukzFI9rgwfU/hqdefault.jpg\",\n                    channel: \"Zach Star\",\n                    educationalValue: \"high\",\n                    difficulty: \"beginner\",\n                    embeddable: true,\n                    language: \"en\"\n                },\n                {\n                    videoId: \"aircAruvnKk\",\n                    title: \"But what is a Neural Network?\",\n                    description: \"3Blue1Brown's excellent visual explanation of neural networks\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/aircAruvnKk/hqdefault.jpg\",\n                    channel: \"3Blue1Brown\",\n                    educationalValue: \"high\",\n                    difficulty: \"beginner\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"neural-networks\": [\n                {\n                    videoId: \"aircAruvnKk\",\n                    title: \"But what is a Neural Network?\",\n                    description: \"Visual and intuitive explanation of neural networks\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/aircAruvnKk/hqdefault.jpg\",\n                    channel: \"3Blue1Brown\",\n                    educationalValue: \"high\",\n                    difficulty: \"beginner\",\n                    embeddable: true,\n                    language: \"en\"\n                },\n                {\n                    videoId: \"IHZwWFHWa-w\",\n                    title: \"Neural Networks Explained\",\n                    description: \"Comprehensive neural network tutorial\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/IHZwWFHWa-w/hqdefault.jpg\",\n                    channel: \"Zach Star\",\n                    educationalValue: \"high\",\n                    difficulty: \"intermediate\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"deep-learning\": [\n                {\n                    videoId: \"R9OHn5ZF4Uo\",\n                    title: \"Deep Learning in 5 Minutes\",\n                    description: \"Quick introduction to deep learning concepts\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/R9OHn5ZF4Uo/hqdefault.jpg\",\n                    channel: \"Siraj Raval\",\n                    educationalValue: \"high\",\n                    difficulty: \"beginner\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"transformers\": [\n                {\n                    videoId: \"kCc8FmEb1nY\",\n                    title: \"Attention is All You Need (Transformer) - Model explanation\",\n                    description: \"Deep dive into transformer architecture\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/kCc8FmEb1nY/hqdefault.jpg\",\n                    channel: \"The A.I. Hacker - Michael Phi\",\n                    educationalValue: \"high\",\n                    difficulty: \"advanced\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"prompt-engineering\": [\n                {\n                    videoId: \"dOxUroR57xs\",\n                    title: \"Prompt Engineering Guide\",\n                    description: \"Complete guide to effective prompt engineering\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/dOxUroR57xs/hqdefault.jpg\",\n                    channel: \"AI Explained\",\n                    educationalValue: \"high\",\n                    difficulty: \"intermediate\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"computer-vision\": [\n                {\n                    videoId: \"SPuwxIyRpFI\",\n                    title: \"Computer Vision Explained\",\n                    description: \"Introduction to computer vision and image processing\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/SPuwxIyRpFI/hqdefault.jpg\",\n                    channel: \"Computerphile\",\n                    educationalValue: \"high\",\n                    difficulty: \"intermediate\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ],\n            \"nlp\": [\n                {\n                    videoId: \"CMrHM8a3hqw\",\n                    title: \"Natural Language Processing Explained\",\n                    description: \"Comprehensive introduction to NLP concepts\",\n                    thumbnailUrl: \"https://i.ytimg.com/vi/CMrHM8a3hqw/hqdefault.jpg\",\n                    channel: \"Computerphile\",\n                    educationalValue: \"high\",\n                    difficulty: \"intermediate\",\n                    embeddable: true,\n                    language: \"en\"\n                }\n            ]\n        };\n        this.youtubeApiKey = youtubeApiKey || process.env.YOUTUBE_API_KEY || null;\n    }\n    /**\n   * Find the most relevant video for a given topic and user context\n   */ findBestVideoForTopic(topic, difficulty = \"beginner\", language = \"en\") {\n        const normalizedTopic = this.normalizeTopic(topic);\n        // First, try exact match in curated database\n        let videos = this.curatedVideoDatabase[normalizedTopic] || [];\n        // If no exact match, try fuzzy matching\n        if (videos.length === 0) {\n            videos = this.findVideosByFuzzyMatch(topic);\n        }\n        // Filter by criteria\n        const filteredVideos = videos.filter((video)=>{\n            const difficultyMatch = !video.difficulty || this.isDifficultyMatch(video.difficulty, difficulty);\n            const languageMatch = !video.language || video.language === language || language === \"any\";\n            const embeddable = video.embeddable !== false;\n            return difficultyMatch && languageMatch && embeddable;\n        });\n        // Sort by relevance and educational value\n        const videosCopy = [\n            ...filteredVideos\n        ];\n        const sortedVideos = videosCopy.sort((a, b)=>{\n            const aScore = this.calculateRelevanceScore(a, topic, difficulty);\n            const bScore = this.calculateRelevanceScore(b, topic, difficulty);\n            return bScore - aScore;\n        });\n        return sortedVideos[0] || null;\n    }\n    /**\n   * Get multiple video recommendations for a topic (internal implementation)\n   */ getVideoRecommendationsInternal(topic, count = 3, criteria) {\n        const normalizedTopic = this.normalizeTopic(topic);\n        let videos = this.curatedVideoDatabase[normalizedTopic] || [];\n        // Add fuzzy matches\n        videos = [\n            ...videos,\n            ...this.findVideosByFuzzyMatch(topic)\n        ];\n        // Remove duplicates\n        videos = videos.filter((video, index, self)=>index === self.findIndex((v)=>v.videoId === video.videoId));\n        // Apply criteria filters\n        if (criteria) {\n            videos = this.applySearchCriteria(videos, criteria);\n        }\n        // Sort and limit\n        const videosCopy = [\n            ...videos\n        ];\n        const sortedVideos = videosCopy.sort((a, b)=>this.calculateRelevanceScore(b, topic, criteria?.difficulty) - this.calculateRelevanceScore(a, topic, criteria?.difficulty));\n        return sortedVideos.slice(0, count);\n    }\n    /**\n   * Get video recommendations using search criteria object\n   */ async getVideoRecommendationsByCriteria(criteria) {\n        const topic = criteria.topic;\n        const count = 3; // Default count\n        // Use the existing method with the criteria as third parameter\n        return Promise.resolve(this.getVideoRecommendationsInternal(topic, count, criteria));\n    }\n    /**\n   * Get multiple video recommendations for a topic\n   */ getVideoRecommendations(topic, count = 3, criteria) {\n        return this.getVideoRecommendationsInternal(topic, count, criteria);\n    }\n    /**\n   * Create a learning playlist for a topic\n   */ createLearningPlaylist(topic, difficulty = \"beginner\") {\n        const videos = this.getVideoRecommendations(topic, 5, {\n            difficulty,\n            educationalOnly: true\n        });\n        return {\n            id: `playlist_${topic}_${difficulty}_${Date.now()}`,\n            title: `${topic.charAt(0).toUpperCase() + topic.slice(1)} - ${difficulty} level`,\n            description: `Curated learning playlist for ${topic} at ${difficulty} level`,\n            videos,\n            topic,\n            totalDuration: videos.reduce((total, video)=>{\n                const duration = this.parseDuration(video.duration || \"0:00\");\n                return total + duration;\n            }, 0)\n        };\n    }\n    /**\n   * Check if a video is embeddable (placeholder for real API check)\n   */ async checkEmbeddable(videoId) {\n        // This would require YouTube API to check oembed endpoint\n        // For now, return true for curated videos\n        const allVideos = Object.values(this.curatedVideoDatabase).flat();\n        const video = allVideos.find((v)=>v.videoId === videoId);\n        return video?.embeddable !== false;\n    }\n    /**\n   * Get video metadata from YouTube API (if available)\n   */ async getVideoMetadata(videoId) {\n        if (!this.youtubeApiKey) {\n            // Fallback to curated data\n            const allVideos = Object.values(this.curatedVideoDatabase).flat();\n            return allVideos.find((v)=>v.videoId === videoId) || null;\n        }\n        try {\n            // YouTube API call would go here\n            // For now, return curated data\n            const allVideos = Object.values(this.curatedVideoDatabase).flat();\n            return allVideos.find((v)=>v.videoId === videoId) || null;\n        } catch (error) {\n            console.error(\"Error fetching video metadata:\", error);\n            return null;\n        }\n    }\n    /**\n   * Generate video embed URL\n   */ getEmbedUrl(videoId, options) {\n        const baseUrl = `https://www.youtube.com/embed/${videoId}`;\n        const params = new URLSearchParams();\n        if (options?.autoplay) params.set(\"autoplay\", \"1\");\n        if (options?.start) params.set(\"start\", options.start.toString());\n        if (options?.end) params.set(\"end\", options.end.toString());\n        if (options?.modestbranding !== false) params.set(\"modestbranding\", \"1\");\n        // Educational-friendly defaults\n        params.set(\"rel\", \"0\"); // Don't show related videos\n        params.set(\"fs\", \"1\"); // Allow fullscreen\n        params.set(\"cc_load_policy\", \"1\"); // Show captions when available\n        return `${baseUrl}?${params.toString()}`;\n    }\n    // Private helper methods\n    normalizeTopic(topic) {\n        return topic.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^\\w-]/g, \"\");\n    }\n    findVideosByFuzzyMatch(topic) {\n        const topicLower = topic.toLowerCase();\n        const matches = [];\n        for (const [key, videos] of Object.entries(this.curatedVideoDatabase)){\n            if (key.includes(topicLower) || topicLower.includes(key.replace(\"-\", \" \"))) {\n                matches.push(...videos);\n            }\n        }\n        return matches;\n    }\n    calculateRelevanceScore(video, topic, difficulty) {\n        let score = 0;\n        // Educational value weight\n        if (video.educationalValue === \"high\") score += 3;\n        else if (video.educationalValue === \"medium\") score += 2;\n        else score += 1;\n        // Difficulty match\n        if (difficulty && video.difficulty === difficulty) score += 2;\n        // Embeddable preference\n        if (video.embeddable) score += 1;\n        // Trusted channel bonus\n        if (this.isTrustedChannel(video.channel)) score += 2;\n        // Title relevance (simple keyword matching)\n        const titleLower = video.title.toLowerCase();\n        const topicLower = topic.toLowerCase();\n        if (titleLower.includes(topicLower)) score += 2;\n        return score;\n    }\n    isDifficultyMatch(videoDifficulty, requestedDifficulty) {\n        const levels = {\n            \"beginner\": 1,\n            \"intermediate\": 2,\n            \"advanced\": 3\n        };\n        const videoLevel = levels[videoDifficulty] || 2;\n        const requestedLevel = levels[requestedDifficulty] || 2;\n        // Allow videos one level up or down\n        return Math.abs(videoLevel - requestedLevel) <= 1;\n    }\n    applySearchCriteria(videos, criteria) {\n        return videos.filter((video)=>{\n            if (criteria.difficulty && !this.isDifficultyMatch(video.difficulty || \"intermediate\", criteria.difficulty)) {\n                return false;\n            }\n            if (criteria.language && video.language && video.language !== criteria.language) {\n                return false;\n            }\n            if (criteria.educationalOnly && video.educationalValue === \"low\") {\n                return false;\n            }\n            if (criteria.excludeChannels && video.channel && criteria.excludeChannels.includes(video.channel)) {\n                return false;\n            }\n            return true;\n        });\n    }\n    isTrustedChannel(channelName) {\n        if (!channelName) return false;\n        return this.trustedEducationalChannels.some((channel)=>channel.name === channelName);\n    }\n    parseDuration(duration) {\n        // Parse duration string like \"5:30\" to seconds\n        const parts = duration.split(\":\").reverse();\n        let seconds = 0;\n        parts.forEach((part, index)=>{\n            seconds += parseInt(part) * Math.pow(60, index);\n        });\n        return seconds;\n    }\n}\n// Create singleton instance\nconst videoService = new VideoService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/video-service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjnufloga%2FDocuments%2FHacknation%2Fprofai_mvp%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
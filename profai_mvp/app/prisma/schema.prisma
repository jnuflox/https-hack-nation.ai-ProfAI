// ProfAI MVP Database Schema
// Diseñado para enseñanza adaptativa con IA e inteligencia emocional

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// ============ AUTENTICACIÓN (NextAuth) ============
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============ USUARIOS Y PERFILES ============
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para auth simple
  
  // Perfil de aprendizaje específico de ProfAI
  firstName     String?
  lastName      String?
  learningStyle Json?     // {visual: 0.8, auditory: 0.6, kinesthetic: 0.7}
  voiceProfile  Json?     // {pitch_preference, speed, accent}
  skillLevel    Json?     // {theory: 'intermediate', tooling: 'beginner'}
  emotionBaseline Json?   // calibración inicial emocional
  preferences   Json?     // configuraciones generales
  
  // Tracking de progreso
  totalLessonsCompleted Int @default(0)
  currentStreak         Int @default(0)
  lastActiveAt          DateTime?
  
  // Relaciones
  accounts              Account[]
  sessions              Session[]
  learninSessions      LearningSession[]
  conversations        Conversation[]
  evaluations          Evaluation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============ CONTENIDO EDUCATIVO ============
model Course {
  id          String @id @default(cuid())
  title       String
  description String?
  category    String // 'theory', 'tooling', 'hybrid'
  difficulty  Int    // 1-5 scale
  imageUrl    String?
  
  // Metadatos
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  // Relaciones
  lessons     Lesson[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String @id @default(cuid())
  title       String
  description String?
  content     Json   // Contenido estructurado de la lección
  
  // Categorización
  courseId       String
  topicCategory  String // 'theory', 'tooling', 'hybrid'
  difficultyLevel Int   // 1-5
  estimatedDuration Int // en segundos
  
  // Prerequisitos y dependencias
  prerequisites String   // JSON string con IDs de otras lecciones
  tags          String   // JSON string con tags para búsqueda
  
  // Formatos disponibles
  hasVideoContent Boolean @default(false)
  hasCodeExamples Boolean @default(false)
  hasQuiz         Boolean @default(false)
  
  // Metadatos para embeddings (vector search)
  embedding    Json?  // vector embedding para búsqueda semántica
  
  // Relaciones
  course              Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learningSessions   LearningSession[]
  evaluations        Evaluation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courseId, difficultyLevel])
  @@index([topicCategory, difficultyLevel])
}

// ============ SESIONES DE APRENDIZAJE ============
model LearningSession {
  id              String @id @default(cuid())
  userId          String
  lessonId        String
  
  // Tracking de progreso
  status          String @default("started") // started, completed, paused, abandoned
  completionRate  Float  @default(0.0) // 0.0 - 1.0
  formatUsed      String? // video, text, interactive
  
  // Tracking emocional (simplificado para MVP)
  emotionEvents   String? // JSON string con [{timestamp, emotion, confidence, trigger}]
  adaptationCount Int    @default(0) // cuántas veces se adaptó el contenido
  
  // Interacciones con voz/texto
  voiceInteractions String? // JSON string con transcripciones y análisis
  chatMessages      Int    @default(0)
  
  // Feedback
  feedbackScore   Int? // 1-10 rating
  feedbackComment String?
  
  // Timestamps
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([userId, startedAt])
  @@index([lessonId, status])
}

// ============ CONVERSACIONES Y CHAT ============
model Conversation {
  id     String @id @default(cuid())
  userId String
  title  String @default("Nueva conversación")
  
  // Contexto de la conversación
  context    Json?   // contexto actual, lección relacionada, estado emocional
  lessonId   String? // si está relacionada con una lección específica
  
  // Estado
  isActive Boolean @default(true)
  
  // Relaciones
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, createdAt])
}

model Message {
  id             String @id @default(cuid())
  conversationId String
  
  // Contenido del mensaje
  content String
  role    String // 'user', 'assistant', 'system'
  
  // Análisis emocional (para MVP básico)
  emotionalState Json? // {primary_emotion, confidence, detected_confusion}
  
  // Metadatos
  tokenCount Int?
  
  // Relaciones
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([conversationId, createdAt])
}

// ============ EVALUACIONES Y PROGRESO ============
model Evaluation {
  id       String @id @default(cuid())
  userId   String
  lessonId String
  type     String // 'quiz', 'exercise', 'project'
  
  // Datos de la evaluación
  questions Json   // preguntas/ejercicios presentados
  answers   Json   // respuestas del usuario
  results   Json   // {correctness, clarity, efficiency, next_actions}
  
  // Scoring
  score         Float? // 0.0 - 1.0
  maxScore      Float? // puntaje máximo posible
  autoGenerated Boolean @default(true) // si fue generada por IA
  
  // Feedback detallado
  feedback      String?
  suggestions   Json? // sugerencias específicas
  
  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([userId, lessonId])
  @@index([type, score])
}

// ============ CONTENIDO GENERADO AUTOMÁTICAMENTE ============
model GeneratedContent {
  id    String @id @default(cuid())
  title String
  type  String // 'video_tutorial', 'micro_lesson', 'tool_update', 'migration_guide'
  
  // Trigger de generación
  generationTrigger Json // {type: 'new_tool', source: 'github', tool: 'langchain'}
  
  // Contenido generado
  content     Json   // contenido estructurado
  metadata    Json   // metadatos adicionales
  assets      Json?  // URLs de videos, imágenes, código
  
  // Distribución
  isPublished   Boolean @default(false)
  publishedAt   DateTime?
  viewCount     Int     @default(0)
  
  // Métricas de generación
  generationTimeMs Int?
  tokensUsed       Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type, isPublished])
  @@index([createdAt])
}
